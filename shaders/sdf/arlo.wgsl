//// PREAMBLE

fn signed_distance_function(pos: vec3<f32>) -> f32 {
    return compute_main_digraph(pos).v_dist;
}

//// BUILTINS

fn inverseSqrt(vv: f32) -> f32 { return 1.0 / sqrt(vv); }

fn opp(vv: f32) -> f32 { return -vv; }

fn vmin2(vv: vec2<f32>) -> f32 { return min(vv.x, vv.y); }
fn vmin3(vv: vec3<f32>) -> f32 { return min(min(vv.x, vv.y), vv.z); }
fn vmin4(vv: vec4<f32>) -> f32 { return min(min(vv.x, vv.y), min(vv.z, vv.w)); }

fn vmax2(vv: vec2<f32>) -> f32 { return max(vv.x, vv.y); }
fn vmax3(vv: vec3<f32>) -> f32 { return max(max(vv.x, vv.y), vv.z); }
fn vmax4(vv: vec4<f32>) -> f32 { return max(max(vv.x, vv.y), max(vv.z, vv.w)); }

// According to the Kronos documentation, the fract of the input is computing
// in this way 'x-floor(x)' which result to wrong results with negative values.
fn fractOfPositiveAndNegativeValue(vv: f32) -> f32 {
    if (vv < 0.0) {
        return vv - ceil(vv);
    } else {
        return vv - floor(vv);
    };
}
fn fractOfPositiveAndNegativeValue2(vv: vec2<f32>) -> vec2<f32> {
    return vec2(
        fractOfPositiveAndNegativeValue(vv.x),
        fractOfPositiveAndNegativeValue(vv.y));
}
fn fractOfPositiveAndNegativeValue3(vv: vec3<f32>) -> vec3<f32> {
    return vec3(
        fractOfPositiveAndNegativeValue(vv.x),
        fractOfPositiveAndNegativeValue(vv.y),
        fractOfPositiveAndNegativeValue(vv.z));
}
fn fractOfPositiveAndNegativeValue4(vv: vec4<f32>) -> vec4<f32> {
    return vec4(
        fractOfPositiveAndNegativeValue(vv.x),
        fractOfPositiveAndNegativeValue(vv.y),
        fractOfPositiveAndNegativeValue(vv.z),
        fractOfPositiveAndNegativeValue(vv.w));
}


// https://www.shadertoy.com/view/4dS3Wd
fn hash(q: f32) -> f32 {
    var p = fract(q * 0.011);
    p *= p + 7.5;
    p *= p + p;
    return fract(p);
}
fn hash2(q: vec2<f32>) -> f32 {
    var p3 = fract(q.xyx) * 0.13;
    p3 += dot(p3, p3.yzx + 3.333);
    return fract((p3.x + p3.y) * p3.z);
}
fn noise(x: f32) -> f32 {
    let i = floor(x);
    let f = fract(x);
    let u = f * f * (3.0 - 2.0 * f);
    return mix(hash(i), hash(i + 1.0), u);
}
fn noise2(x: vec2<f32>) -> f32 {
    let i = floor(x);
    let f = fract(x);
    let a = hash2(i);
    let b = hash2(i + vec2(1.0, 0.0));
    let c = hash2(i + vec2(0.0, 1.0));
    let d = hash2(i + vec2(1.0, 1.0));
    let u = f * f * (3.0 - 2.0 * f);
    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}
fn noise3(x: vec3<f32>) -> f32 {
    const step = vec3(110.0, 241.0, 171.0);
    let i = floor(x);
    let f = fract(x);
    let n = dot(i, step);
    let u = f * f * (3.0 - 2.0 * f);
    return mix(mix(mix(hash(n + dot(step, vec3(0.0, 0.0, 0.0))), hash(n + dot(step, vec3(1.0, 0.0, 0.0))), u.x),
                   mix(hash(n + dot(step, vec3(0.0, 1.0, 0.0))), hash(n + dot(step, vec3(1.0, 1.0, 0.0))), u.x), u.y),
               mix(mix(hash(n + dot(step, vec3(0.0, 0.0, 1.0))), hash(n + dot(step, vec3(1.0, 0.0, 1.0))), u.x),
                   mix(hash(n + dot(step, vec3(0.0, 1.0, 1.0))), hash(n + dot(step, vec3(1.0, 1.0, 1.0))), u.x), u.y), u.z);
}

fn fbm(x_: f32, octaves: f32) -> f32 {
    const shift = 100.0;
    let num_octaves = i32(octaves);
    var v = 0.0;
    var a = 0.5;
    var x = x_;
    for (var i: i32 = 0; i < num_octaves; i++) {
        v += a * noise(x);
        x = x * 2.0 + shift;
        a *= 0.5;
    }
    return v;
}
fn fbm2(x_: vec2<f32>, octaves: f32) -> f32 {
    const shift = vec2(100.0);
    const rot = mat2x2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));
    let num_octaves = i32(octaves);
    var v = 0.0;
    var a = 0.5;
    var x = x_;
    for (var i: i32 = 0; i < num_octaves; i++) {
        v += a * noise2(x);
        x = rot * x * 2.0 + shift;
        a *= 0.5;
    }
    return v;
}
fn fbm3(x_: vec3<f32>, octaves: f32) -> f32 {
    const shift = vec3(100.0);
    let num_octaves = i32(octaves);
    var v = 0.0;
    var a = 0.5;
    var x = x_;
    for (var i: i32 = 0; i < num_octaves; i++) {
        v += a * noise3(x);
        x = x * 2.0 + shift;
        a *= 0.5;
    }
    return v;
}

// https://www.pcg-random.org/
fn noisePcg(q: f32) -> f32 {
    let v = u32(round(q));
    let state = v * 747796405u + 2891336453u;
    let word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return f32(f32((word >> 22u) ^ word) * (1.0/f32(0xffffffffu))) ;
}
// http://www.jcgt.org/published/0009/03/02/
// https://www.shadertoy.com/view/XlGcRh  
fn noisePcg2(q: vec2<f32>) -> vec2<f32> {
    var v = vec2u(q);
    v = v * 1664525u + 1013904223u;
    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;
    v.x = v.x ^ (v.x >> 16u);
    v.y = v.y ^ (v.y >> 16u);
    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;
    v.x = v.x ^ (v.x >> 16u);
    v.y = v.y ^ (v.y >> 16u);
    return vec2f(v) / f32(0xffffffffu);
}
// http://www.jcgt.org/published/0009/03/02/
// https://www.shadertoy.com/view/XlGcRh
fn noisePcg3(q: vec3<f32>) -> vec3<f32> {
    var v = vec3u(q);
    v = v * 1664525u + 1013904223u;
    v.x += v.y * v.z;
    v.y += v.z * v.x;
    v.z += v.x * v.y;
    v.x = v.x ^ (v.x >> 16u);
    v.y = v.y ^ (v.y >> 16u);
    v.z = v.z ^ (v.z >> 16u);
    v.x += v.y * v.z;
    v.y += v.z * v.x;
    v.z += v.x * v.y;
    return vec3f(v) / f32(0xffffffffu);
}
// http://www.jcgt.org/published/0009/03/02/
// https://www.shadertoy.com/view/XlGcRh
fn noisePcg4(q: vec4<f32>) -> vec4<f32> {
    var v = vec4u(q);
    v = v * 1664525u + 1013904223u;
    v.x += v.y * v.w;
    v.y += v.z * v.x;
    v.z += v.x * v.y;
    v.w += v.y * v.z;
    v.x = v.x ^ (v.x >> 16u);
    v.y = v.y ^ (v.y >> 16u);
    v.z = v.z ^ (v.z >> 16u);
    v.w = v.w ^ (v.w >> 16u);
    v.x += v.y * v.w;
    v.y += v.z * v.x;
    v.z += v.x * v.y;
    v.w += v.y * v.z;
    return vec4f(v) / f32(0xffffffffu);
}


//// CUSTOM TYPES

struct t_arlo_neck_consts {
	v_b0: vec3<f32>,
	v_b1: vec3<f32>,
	v_b2: vec3<f32>,
	v_tr_l: f32,
	v_tr_t: f32,
	v_d_smooth: f32,
}

struct t_arlo_head_mouth_bottom_consts {
	v_c2_6_c1_75_c0: vec3<f32>,
	v_c2_7_c2_2_c0: vec3<f32>,
	v_c3_25_c2_12_c0: vec3<f32>,
	v_c0_11: f32,
	v_c0_02: f32,
	v_c0_001: f32,
	v_c0_06: f32,
}

struct t_arlo_tail_consts {
	v_b0: vec3<f32>,
	v_b1: vec3<f32>,
	v_b2: vec3<f32>,
	v_tr_l: f32,
	v_tr_r: f32,
	v_d_smooth: f32,
}

struct t_arlo_head_mouth_upper_consts {
	v_c2_7_c2_16_c_0: vec3<f32>,
	v_c3_4: f32,
	v_c0_2: f32,
	v_c0_65: f32,
	v_c3_35: f32,
	v_c0_03: f32,
	v_c0_12: f32,
	v_c0_04: f32,
}

struct t_arlo_leg_consts2 {
	v_c0_08: f32,
	v_c0_95: f32,
	v_c0_26: f32,
	v_c0_03: f32,
	v_c1_85: f32,
	v_c0_75: f32,
}

struct t_stdconsts {
	v_zero: f32,
	v_origin: vec3<f32>,
	v_one: f32,
	v_dotfive: f32,
	v_two: f32,
	v_pi: f32,
}

struct t_arlo_head_visage_consts {
	v_c2_7: f32,
	v_c2_36: f32,
	v_c2_6: f32,
	v_c1_7: f32,
	v_c0_22: f32,
	v_c0_1: f32,
}

struct t_arlo_legs_consts {
	v_c0_8: f32,
	v_c0_1: f32,
	v_c0_4: f32,
	v_c1_5: f32,
	v_c0_65: f32,
	v_c1_9: f32,
	v_c1_1: f32,
	v_c0_6: f32,
}

struct t_arlo_body_consts {
	v_d1_r: vec3<f32>,
	v_d2_l: vec3<f32>,
	v_d2_r: vec3<f32>,
	v_d_smooth: f32,
	v_cosin: f32,
}

struct t_arlo_legs_consts2 {
	v_c0_3: f32,
	v_c1_05: f32,
	v_c1_6: f32,
	v_c0_2: f32,
	v_c0_9: f32,
	v_c0_7: f32,
}

struct t_arlo_head_brows_consts {
	v_c2_84_c2_50_c0_04: vec3<f32>,
	v_c2_81_c2_52_c0_15: vec3<f32>,
	v_c2_76_c2_4_c0_18: vec3<f32>,
	v_c0_02: f32,
	v_c0_035: f32,
	v_c0_025: f32,
	v_c0_01: f32,
}

struct t_arlo_leg_consts {
	v_c0_1: f32,
	v_c0_15: f32,
	v_c0_2: f32,
	v_c0_25: f32,
	v_c0_32: f32,
	v_c0_4: f32,
	v_c0_06: f32,
	v_c0_21: f32,
}

struct t_position {
	v_pos: vec3<f32>,
}
struct t_outlet {
	v_dist: f32,
}

//// INSTANCES

const c_arlo_neck_consts: t_arlo_neck_consts = t_arlo_neck_consts(vec3(-0.9, 0.3, 0), vec3(-2.2, 0.5, 0), vec3(-2.6, 1.7, 0), f32(0.35), f32(0.23), f32(0.15));
const c_arlo_head_mouth_bottom_consts: t_arlo_head_mouth_bottom_consts = t_arlo_head_mouth_bottom_consts(vec3(-2.6, 1.75, 0), vec3(-2.7, 2.2, 0), vec3(-3.25, 2.12, 0), f32(0.11), f32(0.02), f32(0.001), f32(0.06));
const c_arlo_tail_consts: t_arlo_tail_consts = t_arlo_tail_consts(vec3(1, -0.4, 0), vec3(2, -0.96, -0.5), vec3(3, -0.5, 1.5), f32(0.3), f32(0.25), f32(0.2));
const c_arlo_head_mouth_upper_consts: t_arlo_head_mouth_upper_consts = t_arlo_head_mouth_upper_consts(vec3(-2.7, 2.16, 0), f32(3.4), f32(0.2), f32(0.65), f32(3.35), f32(0.03), f32(0.12), f32(0.04));
const c_arlo_leg_consts2: t_arlo_leg_consts2 = t_arlo_leg_consts2(f32(0.08), f32(0.95), f32(0.26), f32(0.03), f32(1.85), f32(0.75));
const c_stdconsts: t_stdconsts = t_stdconsts(f32(0), vec3(0, 0, 0), f32(1), f32(0.5), f32(2), f32(3.14159));
const c_arlo_head_visage_consts: t_arlo_head_visage_consts = t_arlo_head_visage_consts(f32(2.7), f32(2.36), f32(2.6), f32(1.7), f32(0.22), f32(0.1));
const c_arlo_legs_consts: t_arlo_legs_consts = t_arlo_legs_consts(f32(0.8), f32(0.1), f32(0.4), f32(1.5), f32(0.65), f32(1.9), f32(1.1), f32(0.6));
const c_arlo_body_consts: t_arlo_body_consts = t_arlo_body_consts(vec3(1.3, 0.75, 0.8), vec3(0.05, 0.45, 0), vec3(0.8, 0.6, 0.5), f32(0.4), f32(0.2));
const c_arlo_legs_consts2: t_arlo_legs_consts2 = t_arlo_legs_consts2(f32(0.3), f32(1.05), f32(1.6), f32(0.2), f32(0.9), f32(0.7));
const c_arlo_head_brows_consts: t_arlo_head_brows_consts = t_arlo_head_brows_consts(vec3(-2.84, 2.5, 0.04), vec3(-2.81, 2.52, 0.15), vec3(-2.76, 2.4, 0.18), f32(0.02), f32(0.035), f32(0.025), f32(0.01));
const c_arlo_leg_consts: t_arlo_leg_consts = t_arlo_leg_consts(f32(0.1), f32(0.15), f32(0.2), f32(0.25), f32(0.32), f32(0.4), f32(0.06), f32(0.21));

//// IMPLEMENTATIONS

// FID[0434] ComposeFuncType::Terminal main:(v3 pos)->(sc dist)
// FID[0421] ComposeFuncType::Inlet position:()->(v3 pos)
// FID[0435] ComposeFuncType::Outlet outlet:(sc dist)->()
fn compute_main_digraph(a_pos: vec3<f32>) -> t_outlet {
	let tmp1466: vec2<f32> = ((vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)) - (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)));
	let tmp1506: vec2<f32> = (tmp1466 * ((((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y) - ((vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y)) * c_stdconsts.v_two));
	let tmp1507: vec2<f32> = (((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)) - (vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y))) * ((((vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y) - ((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y)) * c_stdconsts.v_two));
	let tmp1508: vec2<f32> = (((vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)) - (vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y))) * (((vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y) - ((vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y)));
	let tmp1337: vec2<f32> = ((vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)) - (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)));
	let tmp1469: vec2<f32> = (tmp1506 + tmp1507);
	let tmp1377: vec2<f32> = (tmp1337 * ((((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y) - ((vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y)) * c_stdconsts.v_two));
	let tmp1378: vec2<f32> = (((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)) - (vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y))) * ((((vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y) - ((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y)) * c_stdconsts.v_two));
	let tmp1493: t_stdconsts = c_stdconsts;
	let tmp1470: vec2<f32> = (tmp1469 + tmp1508);
	let tmp1463: f32 = (((((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y) - ((vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y)) * c_stdconsts.v_two) * ((((vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y) - ((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y)) * c_stdconsts.v_two));
	let tmp1340: vec2<f32> = (tmp1377 + tmp1378);
	let tmp1379: vec2<f32> = (((vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)) - (vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y))) * (((vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y) - ((vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y)));
	let tmp1464: f32 = ((((vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y) - ((vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y)) * (((vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y) - ((vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)).y)));
	let tmp1509: vec2<f32> = (tmp1470 * tmp1493.v_two);
	let tmp1364: t_stdconsts = c_stdconsts;
	let tmp1471: vec2<f32> = tmp1509;
	let tmp1341: vec2<f32> = (tmp1340 + tmp1379);
	let tmp1473: f32 = opp(tmp1471.x);
	let tmp1465: f32 = (tmp1463 - tmp1464);
	let tmp1334: f32 = (((((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y) - ((vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y)) * c_stdconsts.v_two) * ((((vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y) - ((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y)) * c_stdconsts.v_two));
	let tmp1476: f32 = dot(vec2<f32>(tmp1471.y, tmp1473), vec2<f32>(tmp1471.y, tmp1473));
	let tmp1474: f32 = opp(tmp1465);
	let tmp1380: vec2<f32> = (tmp1341 * tmp1364.v_two);
	let tmp1472: vec2<f32> = vec2<f32>(tmp1471.y, tmp1473);
	let tmp1335: f32 = ((((vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y) - ((vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y)) * (((vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y) - ((vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).x * (vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)).y)));
	let tmp1336: f32 = (tmp1334 - tmp1335);
	let tmp1477: vec2<f32> = vec2<f32>(tmp1476, tmp1476);
	let tmp1510: vec2<f32> = (tmp1472 * tmp1474);
	let tmp1342: vec2<f32> = tmp1380;
	let tmp1344: f32 = opp(tmp1342.x);
	let tmp1475: vec2<f32> = (tmp1510 / tmp1477);
	let tmp1347: f32 = dot(vec2<f32>(tmp1342.y, tmp1344), vec2<f32>(tmp1342.y, tmp1344));
	let tmp193: vec2<f32> = ((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)) - (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)));
	let tmp1448: vec2<f32> = (vec2<f32>(dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y));
	let tmp1467: vec2<f32> = ((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)) - (vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)));
	let tmp1455: vec2<f32> = (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y));
	let tmp1454: vec2<f32> = (vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y));
	let tmp1345: f32 = opp(tmp1336);
	let tmp1449: vec2<f32> = (vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y));
	let tmp1343: vec2<f32> = vec2<f32>(tmp1342.y, tmp1344);
	let tmp1460: vec2<f32> = (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y));
	let tmp233: vec2<f32> = (tmp193 * ((((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y) - ((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y)) * c_stdconsts.v_two));
	let tmp234: vec2<f32> = (((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)) - (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y))) * ((((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y) - ((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y)) * c_stdconsts.v_two));
	let tmp1478: vec2<f32> = ((vec2<f32>(dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)) - tmp1475);
	let tmp1522: vec3<f32> = (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1);
	let tmp1516: vec3<f32> = (c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1);
	let tmp1468: vec2<f32> = ((vec2<f32>(dot(tmp1516, normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot(tmp1516, normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)) - (vec2<f32>(dot(tmp1522, normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot(tmp1522, normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1), (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1))))).y)));
	let tmp1530: vec3<f32> = (c_arlo_tail_consts.v_b0 - c_arlo_tail_consts.v_b1);
	let tmp1381: vec2<f32> = (tmp1343 * tmp1345);
	let tmp1445: f32 = (tmp1448.x * tmp1449.y);
	let tmp1297: f32 = cos(c_arlo_body_consts.v_cosin);
	let tmp1296: f32 = sin(c_arlo_body_consts.v_cosin);
	let tmp1348: vec2<f32> = vec2<f32>(tmp1347, tmp1347);
	let tmp1531: vec3<f32> = (c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1);
	let tmp1451: f32 = (tmp1454.x * tmp1455.y);
	let tmp1488: vec2<f32> = tmp1467;
	let tmp1453: f32 = (tmp1455.x * tmp1454.y);
	let tmp1447: f32 = (tmp1449.x * tmp1448.y);
	let tmp1487: vec2<f32> = tmp1478;
	let tmp1461: vec2<f32> = (vec2<f32>(dot(tmp1516, normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot(tmp1516, normalize(cross(normalize(cross(tmp1531, tmp1530)), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross(tmp1531, tmp1530)), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(tmp1531, tmp1530)))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(normalize(cross(tmp1531, tmp1530)), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_tail_consts.v_b1), normalize(cross(tmp1531, tmp1530)))).y));
	let tmp1295: f32 = opp(tmp1296);
	let tmp1526: vec3<f32> = cross(normalize(cross(tmp1531, tmp1530)), normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)));
	let tmp1431: t_position = t_position(a_pos);
	let tmp1482: vec2<f32> = tmp1468;
	let tmp1524: f32 = dot(tmp1522, normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)));
	let tmp1523: f32 = dot(tmp1522, normalize(tmp1526));
	let tmp1483: vec2<f32> = tmp1478;
	let tmp1521: t_stdconsts = c_stdconsts;
	let tmp1320: vec2<f32> = (vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y));
	let tmp1518: f32 = dot(tmp1516, normalize((c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1)));
	let tmp1346: vec2<f32> = (tmp1381 / tmp1348);
	let tmp1326: vec2<f32> = (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y));
	let tmp1528: vec3<f32> = (c_arlo_tail_consts.v_b2 - c_arlo_tail_consts.v_b1);
	let tmp1517: f32 = dot(tmp1516, normalize(tmp1526));
	let tmp1532: vec3<f32> = cross(tmp1531, tmp1530);
	let tmp1498: t_stdconsts = c_stdconsts;
	let tmp002: vec2<f32> = vec2<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y);
	let tmp003: mat2x2<f32> = mat2x2<f32>(tmp1297, tmp1296, tmp1295, tmp1297);
	let tmp1325: vec2<f32> = (vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y));
	let tmp055: vec2<f32> = ((vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)) - (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)));
	let tmp1486: f32 = (tmp1488.x * tmp1487.y);
	let tmp1484: f32 = (tmp1487.x * tmp1488.y);
	let tmp1457: f32 = (tmp1460.x * tmp1461.y);
	let tmp1338: vec2<f32> = ((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)) - (vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)));
	let tmp1319: vec2<f32> = (vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y));
	let tmp196: vec2<f32> = (tmp233 + tmp234);
	let tmp1452: f32 = (tmp1453 - tmp1451);
	let tmp1459: f32 = (tmp1461.x * tmp1460.y);
	let tmp235: vec2<f32> = (((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)) - (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y))) * (((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y) - ((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y)));
	let tmp1446: f32 = (tmp1447 - tmp1445);
	let tmp1485: f32 = (tmp1486 - tmp1484);
	let tmp1525: vec2<f32> = vec2<f32>(tmp1524, tmp1523);
	let tmp1520: vec2<f32> = vec2<f32>(tmp1521.v_zero, tmp1521.v_zero);
	let tmp1519: vec2<f32> = vec2<f32>(tmp1518, tmp1517);
	let tmp197: vec2<f32> = (tmp196 + tmp235);
	let tmp1479: f32 = (tmp1482.x * tmp1483.y);
	let tmp1511: vec3<f32> = (tmp1431.v_pos - c_arlo_tail_consts.v_b1);
	let tmp1332: vec2<f32> = (vec2<f32>(dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y));
	let tmp220: t_stdconsts = c_stdconsts;
	let tmp1533: vec3<f32> = normalize(tmp1532);
	let tmp1481: f32 = (tmp1483.x * tmp1482.y);
	let tmp1316: f32 = (tmp1319.x * tmp1320.y);
	let tmp1318: f32 = (tmp1320.x * tmp1319.y);
	let tmp1322: f32 = (tmp1325.x * tmp1326.y);
	let tmp1443: vec2<f32> = vec2<f32>(vec3<f32>(dot(tmp1511, normalize(tmp1528)), dot(tmp1511, normalize(tmp1526)), dot(tmp1511, tmp1533)).x, vec3<f32>(dot(tmp1511, normalize(tmp1528)), dot(tmp1511, normalize(tmp1526)), dot(tmp1511, tmp1533)).y);
	let tmp1349: vec2<f32> = ((vec2<f32>(dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1), (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)) - tmp1346);
	let tmp1402: vec3<f32> = (c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1);
	let tmp1393: vec3<f32> = (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1);
	let tmp1529: vec3<f32> = normalize(tmp1528);
	let tmp1554: t_position = t_position(a_pos);
	let tmp1387: vec3<f32> = (c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1);
	let tmp095: vec2<f32> = (tmp055 * ((((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y) - ((vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y)) * c_stdconsts.v_two));
	let tmp096: vec2<f32> = (((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)) - (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y))) * ((((vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y) - ((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y)) * c_stdconsts.v_two));
	let tmp1458: f32 = (tmp1459 - tmp1457);
	let tmp1339: vec2<f32> = ((vec2<f32>(dot(tmp1387, normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot(tmp1387, normalize(cross(normalize(cross(tmp1402, (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross(tmp1402, (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(tmp1402, (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross(tmp1402, (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(tmp1402, (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)) - (vec2<f32>(dot(tmp1393, normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot(tmp1393, normalize(cross(normalize(cross(tmp1402, (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross(tmp1402, (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(tmp1402, (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross(tmp1402, (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(tmp1402, (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1))))).y)));
	let tmp1359: vec2<f32> = tmp1338;
	let tmp1505: f32 = (tmp1498.v_two * tmp1446);
	let tmp1358: vec2<f32> = tmp1349;
	let tmp000: vec2<f32> = (tmp003 * tmp002);
	let tmp1401: vec3<f32> = (c_arlo_neck_consts.v_b0 - c_arlo_neck_consts.v_b1);
	let tmp1492: t_stdconsts = c_stdconsts;
	let tmp1450: t_stdconsts = c_stdconsts;
	let tmp1527: vec3<f32> = normalize(tmp1526);
	let tmp1324: f32 = (tmp1326.x * tmp1325.y);
	let tmp1331: vec2<f32> = (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross(tmp1402, tmp1401)), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(tmp1402, tmp1401)))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(normalize(cross(tmp1402, tmp1401)), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1))))), dot((t_position(a_pos).v_pos - c_arlo_neck_consts.v_b1), normalize(cross(tmp1402, tmp1401)))).y));
	let tmp1456: f32 = (tmp1452 * tmp1450.v_two);
	let tmp058: vec2<f32> = (tmp095 + tmp096);
	let tmp1489: f32 = (tmp1492.v_two * tmp1485);
	let tmp1388: f32 = dot(tmp1387, normalize(cross(normalize(cross(tmp1402, tmp1401)), normalize((c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1)))));
	let tmp1353: vec2<f32> = tmp1339;
	let tmp1369: t_stdconsts = c_stdconsts;
	let tmp1441: vec2<f32> = (tmp1520 - tmp1443);
	let tmp1514: f32 = dot(tmp1511, tmp1529);
	let tmp1355: f32 = (tmp1358.x * tmp1359.y);
	let tmp1357: f32 = (tmp1359.x * tmp1358.y);
	let tmp1513: f32 = dot(tmp1511, tmp1527);
	let tmp1442: vec2<f32> = (tmp1525 - tmp1443);
	let tmp1512: f32 = dot(tmp1511, tmp1533);
	let tmp1354: vec2<f32> = tmp1349;
	let tmp1392: t_stdconsts = c_stdconsts;
	let tmp1462: f32 = (tmp1458 * tmp1450.v_two);
	let tmp097: vec2<f32> = (((vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)) - (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y))) * (((vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y) - ((vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y)));
	let tmp1496: f32 = (tmp1505 + tmp1456);
	let tmp1317: f32 = (tmp1318 - tmp1316);
	let tmp001: vec2<f32> = tmp000;
	let tmp1302: t_position = t_position(a_pos);
	let tmp191: f32 = ((((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y) - ((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y)) * (((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y) - ((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y)));
	let tmp190: f32 = (((((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y) - ((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y)) * c_stdconsts.v_two) * ((((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y) - ((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).x * (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)).y)) * c_stdconsts.v_two));
	let tmp236: vec2<f32> = (tmp197 * tmp220.v_two);
	let tmp1294: vec3<f32> = tmp1554.v_pos;
	let tmp1328: f32 = (tmp1331.x * tmp1332.y);
	let tmp1330: f32 = (tmp1332.x * tmp1331.y);
	let tmp1440: vec2<f32> = (tmp1519 - tmp1443);
	let tmp1403: vec3<f32> = cross(tmp1402, tmp1401);
	let tmp1323: f32 = (tmp1324 - tmp1322);
	let tmp1480: f32 = (tmp1481 - tmp1479);
	let tmp316: vec3<f32> = (t_position(a_pos).v_pos - c_arlo_head_mouth_upper_consts.v_c2_7_c2_16_c_0);
	let tmp1399: vec3<f32> = (c_arlo_neck_consts.v_b2 - c_arlo_neck_consts.v_b1);
	let tmp1397: vec3<f32> = cross(normalize(tmp1403), normalize(tmp1399));
	let tmp1395: f32 = dot(tmp1393, normalize(tmp1399));
	let tmp1394: f32 = dot(tmp1393, normalize(tmp1397));
	let tmp1389: f32 = dot(tmp1387, normalize(tmp1399));
	let tmp082: t_stdconsts = c_stdconsts;
	let tmp198: vec2<f32> = tmp236;
	let tmp059: vec2<f32> = (tmp058 + tmp097);
	let tmp1515: vec3<f32> = vec3<f32>(tmp1514, tmp1513, tmp1512);
	let tmp1501: vec2<f32> = vec2<f32>(clamp(((tmp1480 + tmp1489) / (tmp1496 + tmp1462)), c_stdconsts.v_zero, c_stdconsts.v_one), clamp(((tmp1480 + tmp1489) / (tmp1496 + tmp1462)), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp1494: f32 = (tmp1480 + tmp1489);
	let tmp1293: vec3<f32> = vec3<f32>(tmp001.x, tmp001.y, tmp1294.z);
	let tmp317: f32 = abs(tmp316.x);
	let tmp1376: f32 = (tmp1369.v_two * tmp1317);
	let tmp1350: f32 = (tmp1353.x * tmp1354.y);
	let tmp1391: vec2<f32> = vec2<f32>(tmp1392.v_zero, tmp1392.v_zero);
	let tmp1390: vec2<f32> = vec2<f32>(tmp1389, tmp1388);
	let tmp200: f32 = opp(tmp198.x);
	let tmp192: f32 = (tmp190 - tmp191);
	let tmp1327: f32 = (tmp1323 * c_stdconsts.v_two);
	let tmp1314: vec2<f32> = vec2<f32>(vec3<f32>(dot((tmp1302.v_pos - c_arlo_neck_consts.v_b1), normalize(tmp1399)), dot((tmp1302.v_pos - c_arlo_neck_consts.v_b1), normalize(tmp1397)), dot((tmp1302.v_pos - c_arlo_neck_consts.v_b1), normalize(tmp1403))).x, vec3<f32>(dot((tmp1302.v_pos - c_arlo_neck_consts.v_b1), normalize(tmp1399)), dot((tmp1302.v_pos - c_arlo_neck_consts.v_b1), normalize(tmp1397)), dot((tmp1302.v_pos - c_arlo_neck_consts.v_b1), normalize(tmp1403))).y);
	let tmp1352: f32 = (tmp1354.x * tmp1353.y);
	let tmp1382: vec3<f32> = (tmp1302.v_pos - c_arlo_neck_consts.v_b1);
	let tmp1497: f32 = (tmp1496 + tmp1462);
	let tmp1329: f32 = (tmp1330 - tmp1328);
	let tmp1356: f32 = (tmp1357 - tmp1355);
	let tmp1398: vec3<f32> = normalize(tmp1397);
	let tmp1404: vec3<f32> = normalize(tmp1403);
	let tmp1534: t_stdconsts = c_stdconsts;
	let tmp1363: t_stdconsts = c_stdconsts;
	let tmp1396: vec2<f32> = vec2<f32>(tmp1395, tmp1394);
	let tmp1400: vec3<f32> = normalize(tmp1399);
	let tmp1321: t_stdconsts = c_stdconsts;
	let tmp1500: vec2<f32> = mix(tmp1442, tmp1441, tmp1501);
	let tmp1502: vec2<f32> = mix(tmp1441, tmp1440, tmp1501);
	let tmp1313: vec2<f32> = (tmp1396 - tmp1314);
	let tmp1312: vec2<f32> = (tmp1391 - tmp1314);
	let tmp1542: vec3<f32> = (tmp1293 - c_arlo_body_consts.v_d2_l);
	let tmp1367: f32 = (tmp1376 + tmp1327);
	let tmp1384: f32 = dot(tmp1382, tmp1398);
	let tmp1491: t_stdconsts = c_stdconsts;
	let tmp1436: vec2<f32> = vec2<f32>(vec3<f32>(mix(tmp1500, tmp1502, tmp1501).x, mix(tmp1500, tmp1502, tmp1501).y, clamp((tmp1494 / tmp1497), tmp1491.v_zero, tmp1491.v_one)).x, vec3<f32>(mix(tmp1500, tmp1502, tmp1501).x, mix(tmp1500, tmp1502, tmp1501).y, clamp((tmp1494 / tmp1497), tmp1491.v_zero, tmp1491.v_one)).y);
	let tmp1383: f32 = dot(tmp1382, tmp1404);
	let tmp201: f32 = opp(tmp192);
	let tmp1333: f32 = (tmp1329 * tmp1321.v_two);
	let tmp1550: f32 = (((length((tmp1542 / c_arlo_body_consts.v_d2_r)) - c_stdconsts.v_one) * vmin3(c_arlo_body_consts.v_d2_r)) - ((length(((tmp1293 - tmp1534.v_origin) / c_arlo_body_consts.v_d1_r)) - c_stdconsts.v_one) * vmin3(c_arlo_body_consts.v_d1_r)));
	let tmp1561: vec3<f32> = (tmp1293 - tmp1534.v_origin);
	let tmp1495: f32 = (tmp1494 / tmp1497);
	let tmp1444: vec3<f32> = tmp1515;
	let tmp199: vec2<f32> = vec2<f32>(tmp198.y, tmp200);
	let tmp1311: vec2<f32> = (tmp1390 - tmp1314);
	let tmp334: t_arlo_head_mouth_upper_consts = c_arlo_head_mouth_upper_consts;
	let tmp1385: f32 = dot(tmp1382, tmp1400);
	let tmp1360: f32 = (tmp1363.v_two * tmp1356);
	let tmp318: f32 = (tmp334.v_c0_2 * tmp317);
	let tmp203: f32 = dot(tmp199, tmp199);
	let tmp098: vec2<f32> = (tmp059 * tmp082.v_two);
	let tmp052: f32 = (((((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y) - ((vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y)) * c_stdconsts.v_two) * ((((vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y) - ((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y)) * c_stdconsts.v_two));
	let tmp1351: f32 = (tmp1352 - tmp1350);
	let tmp1503: vec2<f32> = mix(tmp1500, tmp1502, tmp1501);
	let tmp053: f32 = ((((vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y) - ((vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y)) * (((vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y) - ((vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).x * (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(t_position(a_pos).v_pos.x, t_position(a_pos).v_pos.y, abs(t_position(a_pos).v_pos.z)) + vec3<f32>(c_stdconsts.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), c_stdconsts.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)).y)));
	let tmp1371: vec2<f32> = mix(tmp1313, tmp1312, vec2<f32>(clamp(((tmp1351 + tmp1360) / (tmp1367 + tmp1333)), c_stdconsts.v_zero, c_stdconsts.v_one), clamp(((tmp1351 + tmp1360) / (tmp1367 + tmp1333)), c_stdconsts.v_zero, c_stdconsts.v_one)));
	let tmp1373: vec2<f32> = mix(tmp1312, tmp1311, vec2<f32>(clamp(((tmp1351 + tmp1360) / (tmp1367 + tmp1333)), c_stdconsts.v_zero, c_stdconsts.v_one), clamp(((tmp1351 + tmp1360) / (tmp1367 + tmp1333)), c_stdconsts.v_zero, c_stdconsts.v_one)));
	let tmp054: f32 = (tmp052 - tmp053);
	let tmp1013: vec3<f32> = (vec3<f32>(c_arlo_legs_consts.v_c0_8, opp(c_arlo_legs_consts2.v_c1_6), c_arlo_legs_consts.v_c0_6) - vec3<f32>(c_arlo_legs_consts2.v_c0_3, opp(c_arlo_legs_consts2.v_c1_05), c_arlo_legs_consts.v_c0_6));
	let tmp1372: vec2<f32> = vec2<f32>(clamp(((tmp1351 + tmp1360) / (tmp1367 + tmp1333)), c_stdconsts.v_zero, c_stdconsts.v_one), clamp(((tmp1351 + tmp1360) / (tmp1367 + tmp1333)), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp1386: vec3<f32> = vec3<f32>(tmp1385, tmp1384, tmp1383);
	let tmp1008: t_stdconsts = c_stdconsts;
	let tmp1560: vec3<f32> = (tmp1561 / c_arlo_body_consts.v_d1_r);
	let tmp1504: vec2<f32> = tmp1503;
	let tmp1433: f32 = (tmp1444.z * tmp1444.z);
	let tmp1435: f32 = dot(tmp1436, tmp1436);
	let tmp062: f32 = opp(tmp098.x);
	let tmp1254: vec3<f32> = (vec3<f32>(opp(c_arlo_legs_consts.v_c1_9), opp(c_arlo_legs_consts.v_c1_1), c_arlo_legs_consts.v_c0_65) - vec3<f32>(opp(c_arlo_legs_consts.v_c1_5), opp(c_stdconsts.v_dotfive), c_arlo_legs_consts.v_c0_65));
	let tmp060: vec2<f32> = tmp098;
	let tmp204: vec2<f32> = vec2<f32>(tmp203, tmp203);
	let tmp1551: f32 = (c_stdconsts.v_dotfive * tmp1550);
	let tmp237: vec2<f32> = (tmp199 * tmp201);
	let tmp308: f32 = (c_arlo_head_mouth_upper_consts.v_c0_12 + c_stdconsts.v_two);
	let tmp309: t_stdconsts = c_stdconsts;
	let tmp310: f32 = opp(c_arlo_head_mouth_upper_consts.v_c3_35);
	let tmp315: f32 = (tmp318 / tmp334.v_c0_65);
	let tmp1249: t_stdconsts = c_stdconsts;
	let tmp1541: vec3<f32> = (tmp1542 / c_arlo_body_consts.v_d2_r);
	let tmp1490: f32 = clamp(tmp1495, tmp1491.v_zero, tmp1491.v_one);
	let tmp1365: f32 = (tmp1351 + tmp1360);
	let tmp1368: f32 = (tmp1367 + tmp1333);
	let tmp1012: vec3<f32> = normalize(tmp1013);
	let tmp1559: f32 = length(tmp1560);
	let tmp1434: f32 = (tmp1435 + tmp1433);
	let tmp1010: vec3<f32> = vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one);
	let tmp773: t_stdconsts = c_stdconsts;
	let tmp202: vec2<f32> = (tmp237 / tmp204);
	let tmp061: vec2<f32> = vec2<f32>(tmp060.y, tmp062);
	let tmp1549: f32 = (tmp1551 / c_arlo_body_consts.v_d_smooth);
	let tmp982: t_stdconsts = c_stdconsts;
	let tmp336: t_position = t_position(a_pos);
	let tmp312: vec3<f32> = vec3<f32>(tmp310, tmp308, tmp309.v_zero);
	let tmp307: t_arlo_head_mouth_upper_consts = c_arlo_head_mouth_upper_consts;
	let tmp1374: vec2<f32> = mix(tmp1371, tmp1373, tmp1372);
	let tmp1315: vec3<f32> = tmp1386;
	let tmp1423: f32 = ((vec2<f32>(sqrt(tmp1434), vec3<f32>(tmp1504.x, tmp1504.y, tmp1490).z).x - (c_arlo_tail_consts.v_tr_l - (c_arlo_tail_consts.v_tr_r * vec2<f32>(sqrt(tmp1434), vec3<f32>(tmp1504.x, tmp1504.y, tmp1490).z).y))) - (mix(((length(tmp1541) - c_stdconsts.v_one) * vmin3(c_arlo_body_consts.v_d2_r)), ((tmp1559 - c_stdconsts.v_one) * vmin3(c_arlo_body_consts.v_d1_r)), clamp((tmp1549 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((tmp1549 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_body_consts.v_d_smooth) * (c_stdconsts.v_one - clamp((tmp1549 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp1499: vec3<f32> = vec3<f32>(tmp1504.x, tmp1504.y, tmp1490);
	let tmp065: f32 = dot(tmp061, tmp061);
	let tmp319: f32 = (c_stdconsts.v_one - tmp315);
	let tmp778: vec3<f32> = (vec3<f32>(opp(c_arlo_legs_consts2.v_c0_7), opp(c_arlo_legs_consts2.v_c1_6), opp(c_arlo_legs_consts.v_c0_65)) - vec3<f32>(opp(c_stdconsts.v_one), opp(c_arlo_legs_consts2.v_c0_9), opp(c_arlo_legs_consts.v_c0_65)));
	let tmp1253: vec3<f32> = normalize(tmp1254);
	let tmp1307: vec2<f32> = vec2<f32>(vec3<f32>(tmp1374.x, tmp1374.y, clamp((tmp1365 / tmp1368), c_stdconsts.v_zero, c_stdconsts.v_one)).x, vec3<f32>(tmp1374.x, tmp1374.y, clamp((tmp1365 / tmp1368), c_stdconsts.v_zero, c_stdconsts.v_one)).y);
	let tmp1251: vec3<f32> = vec3<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero, c_stdconsts.v_zero);
	let tmp1250: vec3<f32> = vec3<f32>(tmp1249.v_zero, tmp1249.v_one, tmp1249.v_zero);
	let tmp1223: t_stdconsts = c_stdconsts;
	let tmp1362: t_stdconsts = c_stdconsts;
	let tmp063: f32 = opp(tmp054);
	let tmp175: vec2<f32> = (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y));
	let tmp176: vec2<f32> = (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y));
	let tmp181: vec2<f32> = (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y));
	let tmp182: vec2<f32> = (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y));
	let tmp311: t_arlo_head_mouth_upper_consts = c_arlo_head_mouth_upper_consts;
	let tmp194: vec2<f32> = ((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)) - (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))).y)));
	let tmp1009: vec3<f32> = vec3<f32>(tmp1008.v_zero, tmp1008.v_one, tmp1008.v_zero);
	let tmp1366: f32 = (tmp1365 / tmp1368);
	let tmp1538: t_stdconsts = c_stdconsts;
	let tmp1540: f32 = length(tmp1541);
	let tmp1557: t_stdconsts = c_stdconsts;
	let tmp320: t_stdconsts = c_stdconsts;
	let tmp1212: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp971: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp313: vec3<f32> = (tmp312 - tmp311.v_c2_7_c2_16_c_0);
	let tmp999: t_stdconsts = c_stdconsts;
	let tmp1304: f32 = (tmp1315.z * tmp1315.z);
	let tmp775: vec3<f32> = vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one);
	let tmp291: t_arlo_head_mouth_upper_consts = c_arlo_head_mouth_upper_consts;
	let tmp937: f32 = (opp(min(((length(((((mat3x3<f32>(normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).x, normalize(mix(tmp1012, tmp1009, tmp1010)).x, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).x, normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).y, normalize(mix(tmp1012, tmp1009, tmp1010)).y, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).y, normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).z, normalize(mix(tmp1012, tmp1009, tmp1010)).z, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(c_arlo_legs_consts.v_c0_8, opp(c_arlo_legs_consts2.v_c1_6), c_arlo_legs_consts.v_c0_6))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))) - (vec3<f32>(tmp971.v_c0_32, opp(tmp971.v_c0_06), c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((vec3<f32>(((mat3x3<f32>(normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).x, normalize(mix(tmp1012, tmp1009, tmp1010)).x, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).x, normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).y, normalize(mix(tmp1012, tmp1009, tmp1010)).y, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).y, normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).z, normalize(mix(tmp1012, tmp1009, tmp1010)).z, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(c_arlo_legs_consts.v_c0_8, opp(c_arlo_legs_consts2.v_c1_6), c_arlo_legs_consts.v_c0_6))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))).x, ((mat3x3<f32>(normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).x, normalize(mix(tmp1012, tmp1009, tmp1010)).x, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).x, normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).y, normalize(mix(tmp1012, tmp1009, tmp1010)).y, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).y, normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).z, normalize(mix(tmp1012, tmp1009, tmp1010)).z, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(c_arlo_legs_consts.v_c0_8, opp(c_arlo_legs_consts2.v_c1_6), c_arlo_legs_consts.v_c0_6))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))).y, abs(((mat3x3<f32>(normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).x, normalize(mix(tmp1012, tmp1009, tmp1010)).x, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).x, normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).y, normalize(mix(tmp1012, tmp1009, tmp1010)).y, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).y, normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).z, normalize(mix(tmp1012, tmp1009, tmp1010)).z, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(c_arlo_legs_consts.v_c0_8, opp(c_arlo_legs_consts2.v_c1_6), c_arlo_legs_consts.v_c0_6))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))).z)) - vec3<f32>((c_arlo_leg_consts.v_c0_21 * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two))), (opp(c_arlo_leg_consts2.v_c0_08) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two))), c_arlo_leg_consts2.v_c0_26)) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))) - ((length(((((mat3x3<f32>(normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).x, normalize(mix(tmp1012, tmp1009, tmp1010)).x, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).x, normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).y, normalize(mix(tmp1012, tmp1009, tmp1010)).y, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).y, normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).z, normalize(mix(tmp1012, tmp1009, tmp1010)).z, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(c_arlo_legs_consts.v_c0_8, opp(c_arlo_legs_consts2.v_c1_6), c_arlo_legs_consts.v_c0_6))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))) - tmp982.v_origin) / vec3<f32>(c_arlo_leg_consts.v_c0_4, c_arlo_leg_consts.v_c0_25, c_arlo_leg_consts.v_c0_4))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_arlo_leg_consts.v_c0_4, c_arlo_leg_consts.v_c0_25, c_arlo_leg_consts.v_c0_4))));
	let tmp180: f32 = (tmp182.x * tmp181.y);
	let tmp178: f32 = (tmp181.x * tmp182.y);
	let tmp774: vec3<f32> = vec3<f32>(tmp773.v_zero, tmp773.v_one, tmp773.v_zero);
	let tmp948: f32 = opp(c_arlo_leg_consts2.v_c0_08);
	let tmp258: vec3<f32> = (c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0);
	let tmp1552: t_stdconsts = c_stdconsts;
	let tmp747: t_stdconsts = c_stdconsts;
	let tmp172: f32 = (tmp175.x * tmp176.y);
	let tmp1252: vec3<f32> = mix(tmp1253, tmp1250, tmp1251);
	let tmp983: vec3<f32> = (((mat3x3<f32>(normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).x, normalize(mix(tmp1012, tmp1009, tmp1010)).x, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).x, normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).y, normalize(mix(tmp1012, tmp1009, tmp1010)).y, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).y, normalize(cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(mix(tmp1012, tmp1009, tmp1010)))).z, normalize(mix(tmp1012, tmp1009, tmp1010)).z, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(c_arlo_legs_consts.v_c0_8, opp(c_arlo_legs_consts2.v_c1_6), c_arlo_legs_consts.v_c0_6))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))) - tmp982.v_origin);
	let tmp1361: f32 = clamp(tmp1366, tmp1362.v_zero, tmp1362.v_one);
	let tmp1242: vec3<f32> = cross(vec3<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero, c_stdconsts.v_one), normalize(tmp1252));
	let tmp1224: vec3<f32> = (((mat3x3<f32>(normalize(tmp1242).x, normalize(tmp1252).x, vec3<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero, c_stdconsts.v_one).x, normalize(tmp1242).y, normalize(tmp1252).y, vec3<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero, c_stdconsts.v_one).y, normalize(tmp1242).z, normalize(tmp1252).z, vec3<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero, c_stdconsts.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(opp(c_arlo_legs_consts.v_c1_9), opp(c_arlo_legs_consts.v_c1_1), c_arlo_legs_consts.v_c0_65))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))) - tmp1223.v_origin);
	let tmp1011: vec3<f32> = mix(tmp1012, tmp1009, tmp1010);
	let tmp174: f32 = (tmp176.x * tmp175.y);
	let tmp099: vec2<f32> = (tmp061 * tmp063);
	let tmp257: vec3<f32> = (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0);
	let tmp1211: f32 = opp(tmp1212.v_c0_06);
	let tmp1210: t_stdconsts = c_stdconsts;
	let tmp066: vec2<f32> = vec2<f32>(tmp065, tmp065);
	let tmp1240: t_stdconsts = c_stdconsts;
	let tmp195: vec2<f32> = ((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(tmp258, tmp257)))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(tmp258, tmp257)))).y)) - (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(tmp258, tmp257)))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(tmp258, tmp257)))).y)));
	let tmp777: vec3<f32> = normalize(tmp778);
	let tmp1543: f32 = (tmp1549 + tmp1552.v_dotfive);
	let tmp321: vec3<f32> = vec3<f32>(tmp320.v_one, tmp320.v_one, tmp319);
	let tmp1437: vec3<f32> = tmp1499;
	let tmp1439: f32 = sqrt(tmp1434);
	let tmp188: vec2<f32> = (vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(tmp258, tmp257)))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(tmp258, tmp257)))).y));
	let tmp1424: f32 = (c_stdconsts.v_dotfive * tmp1423);
	let tmp205: vec2<f32> = ((vec2<f32>(dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0)))))) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(tmp258, tmp257)))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(tmp258, tmp257)))).y)) - tmp202);
	let tmp214: vec2<f32> = tmp205;
	let tmp1535: t_arlo_body_consts = c_arlo_body_consts;
	let tmp215: vec2<f32> = tmp194;
	let tmp970: f32 = opp(tmp971.v_c0_06);
	let tmp335: vec3<f32> = (tmp336.v_pos - tmp307.v_c2_7_c2_16_c_0);
	let tmp1001: vec3<f32> = cross(vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one), normalize(tmp1011));
	let tmp1375: vec2<f32> = tmp1374;
	let tmp969: t_stdconsts = c_stdconsts;
	let tmp187: vec2<f32> = (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(tmp258, tmp257)))).x, vec3<f32>(dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(normalize(cross(tmp258, tmp257)), normalize((c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0))))), dot((t_position(a_pos).v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0), normalize(cross(tmp258, tmp257)))).y));
	let tmp1537: f32 = vmin3(tmp1535.v_d2_r);
	let tmp544: vec3<f32> = (vec3<f32>(c_arlo_legs_consts2.v_c1_6, opp(c_arlo_legs_consts.v_c1_1), opp(c_arlo_legs_consts2.v_c0_7)) - vec3<f32>(c_arlo_legs_consts.v_c0_8, opp(c_arlo_legs_consts2.v_c0_9), opp(c_arlo_legs_consts.v_c0_6)));
	let tmp1539: f32 = (tmp1540 - tmp1538.v_one);
	let tmp273: t_position = t_position(a_pos);
	let tmp1556: f32 = vmin3(tmp1535.v_d1_r);
	let tmp539: t_stdconsts = c_stdconsts;
	let tmp1178: f32 = (opp(min(((length(((((mat3x3<f32>(normalize(tmp1242).x, normalize(tmp1252).x, vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one).x, normalize(tmp1242).y, normalize(tmp1252).y, vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one).y, normalize(tmp1242).z, normalize(tmp1252).z, vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(opp(c_arlo_legs_consts.v_c1_9), opp(c_arlo_legs_consts.v_c1_1), c_arlo_legs_consts.v_c0_65))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))) - (vec3<f32>(tmp1212.v_c0_32, tmp1211, tmp1210.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((vec3<f32>(((mat3x3<f32>(normalize(tmp1242).x, normalize(tmp1252).x, vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one).x, normalize(tmp1242).y, normalize(tmp1252).y, vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one).y, normalize(tmp1242).z, normalize(tmp1252).z, vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(opp(c_arlo_legs_consts.v_c1_9), opp(c_arlo_legs_consts.v_c1_1), c_arlo_legs_consts.v_c0_65))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))).x, ((mat3x3<f32>(normalize(tmp1242).x, normalize(tmp1252).x, vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one).x, normalize(tmp1242).y, normalize(tmp1252).y, vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one).y, normalize(tmp1242).z, normalize(tmp1252).z, vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(opp(c_arlo_legs_consts.v_c1_9), opp(c_arlo_legs_consts.v_c1_1), c_arlo_legs_consts.v_c0_65))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))).y, abs(((mat3x3<f32>(normalize(tmp1242).x, normalize(tmp1252).x, vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one).x, normalize(tmp1242).y, normalize(tmp1252).y, vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one).y, normalize(tmp1242).z, normalize(tmp1252).z, vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(opp(c_arlo_legs_consts.v_c1_9), opp(c_arlo_legs_consts.v_c1_1), c_arlo_legs_consts.v_c0_65))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))).z)) - vec3<f32>((c_arlo_leg_consts.v_c0_21 * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two))), (opp(c_arlo_leg_consts2.v_c0_08) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two))), c_arlo_leg_consts2.v_c0_26)) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))) - ((length((tmp1224 / vec3<f32>(c_arlo_leg_consts.v_c0_4, c_arlo_leg_consts.v_c0_25, c_arlo_leg_consts.v_c0_4))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_arlo_leg_consts.v_c0_4, c_arlo_leg_consts.v_c0_25, c_arlo_leg_consts.v_c0_4))));
	let tmp1189: f32 = opp(c_arlo_leg_consts2.v_c0_08);
	let tmp1558: f32 = (tmp1559 - tmp1557.v_one);
	let tmp1306: f32 = dot(tmp1307, tmp1307);
	let tmp249: vec3<f32> = (c_arlo_head_mouth_bottom_consts.v_c2_6_c1_75_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0);
	let tmp243: vec3<f32> = (c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0);
	let tmp173: f32 = (tmp174 - tmp172);
	let tmp543: vec3<f32> = normalize(tmp544);
	let tmp017: t_stdconsts = c_stdconsts;
	let tmp1007: vec3<f32> = normalize(tmp1011);
	let tmp186: f32 = (tmp188.x * tmp187.y);
	let tmp184: f32 = (tmp187.x * tmp188.y);
	let tmp1370: vec3<f32> = vec3<f32>(tmp1375.x, tmp1375.y, tmp1361);
	let tmp037: vec2<f32> = (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y));
	let tmp038: vec2<f32> = (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y));
	let tmp179: f32 = (tmp180 - tmp178);
	let tmp043: vec2<f32> = (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y));
	let tmp044: vec2<f32> = (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y));
	let tmp830: t_stdconsts = c_stdconsts;
	let tmp984: vec3<f32> = (tmp983 / vec3<f32>(c_arlo_leg_consts.v_c0_4, c_arlo_leg_consts.v_c0_25, c_arlo_leg_consts.v_c0_4));
	let tmp954: vec3<f32> = ((mat3x3<f32>(normalize(tmp1001).x, tmp1007.x, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).x, normalize(tmp1001).y, tmp1007.y, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).y, normalize(tmp1001).z, tmp1007.z, vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(c_arlo_legs_consts.v_c0_8, opp(c_arlo_legs_consts2.v_c1_6), c_arlo_legs_consts.v_c0_6))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two))));
	let tmp056: vec2<f32> = ((vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)) - (vec2<f32>(dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot((c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).x, vec3<f32>(dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((vec3<f32>(tmp273.v_pos.x, tmp273.v_pos.y, abs(tmp273.v_pos.z)) + vec3<f32>(tmp017.v_zero, opp(c_arlo_head_brows_consts.v_c0_02), tmp017.v_zero)) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))).y)));
	let tmp1547: f32 = (clamp(tmp1543, tmp1552.v_zero, tmp1552.v_one) * tmp1535.v_d_smooth);
	let tmp832: t_arlo_legs_consts2 = c_arlo_legs_consts2;
	let tmp748: vec3<f32> = (((mat3x3<f32>(normalize(cross(vec3<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero, c_stdconsts.v_one), normalize(mix(tmp777, tmp774, tmp775)))).x, normalize(mix(tmp777, tmp774, tmp775)).x, vec3<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero, c_stdconsts.v_one).x, normalize(cross(vec3<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero, c_stdconsts.v_one), normalize(mix(tmp777, tmp774, tmp775)))).y, normalize(mix(tmp777, tmp774, tmp775)).y, vec3<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero, c_stdconsts.v_one).y, normalize(cross(vec3<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero, c_stdconsts.v_one), normalize(mix(tmp777, tmp774, tmp775)))).z, normalize(mix(tmp777, tmp774, tmp775)).z, vec3<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero, c_stdconsts.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(opp(c_arlo_legs_consts2.v_c0_7), opp(c_arlo_legs_consts2.v_c1_6), opp(c_arlo_legs_consts.v_c0_65)))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))) - tmp747.v_origin);
	let tmp1055: f32 = opp(c_arlo_legs_consts.v_c0_4);
	let tmp1057: f32 = opp(tmp832.v_c1_05);
	let tmp1060: f32 = opp(tmp832.v_c1_6);
	let tmp322: vec3<f32> = (tmp335 * tmp321);
	let tmp1075: f32 = opp(c_arlo_legs_consts.v_c1_1);
	let tmp1545: f32 = (tmp1552.v_one - clamp(tmp1543, tmp1552.v_zero, tmp1552.v_one));
	let tmp972: vec3<f32> = vec3<f32>(tmp971.v_c0_32, tmp970, tmp969.v_zero);
	let tmp736: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp1555: f32 = (tmp1558 * tmp1556);
	let tmp342: f32 = opp(c_arlo_head_visage_consts.v_c2_6);
	let tmp735: f32 = opp(tmp736.v_c0_06);
	let tmp1076: f32 = opp(c_arlo_legs_consts.v_c1_9);
	let tmp1243: vec3<f32> = normalize(tmp1242);
	let tmp1079: f32 = opp(c_stdconsts.v_dotfive);
	let tmp158: t_position = t_position(a_pos);
	let tmp734: t_stdconsts = c_stdconsts;
	let tmp1225: vec3<f32> = (tmp1224 / vec3<f32>(c_arlo_leg_consts.v_c0_4, c_arlo_leg_consts.v_c0_25, c_arlo_leg_consts.v_c0_4));
	let tmp1000: vec3<f32> = vec3<f32>(tmp999.v_zero, tmp999.v_zero, tmp999.v_one);
	let tmp1080: f32 = opp(c_arlo_legs_consts.v_c1_5);
	let tmp1083: f32 = opp(c_arlo_legs_consts.v_c0_1);
	let tmp1213: vec3<f32> = vec3<f32>(tmp1212.v_c0_32, tmp1211, tmp1210.v_zero);
	let tmp1536: f32 = (tmp1539 * tmp1537);
	let tmp609: t_arlo_legs_consts = c_arlo_legs_consts;
	let tmp764: t_stdconsts = c_stdconsts;
	let tmp953: f32 = abs(tmp954.z);
	let tmp1412: f32 = ((vec2<f32>(sqrt((tmp1306 + tmp1304)), tmp1370.z).x - (c_arlo_neck_consts.v_tr_l - (c_arlo_neck_consts.v_tr_t * vec2<f32>(sqrt((tmp1306 + tmp1304)), tmp1370.z).y))) - (mix((vec2<f32>(tmp1439, tmp1437.z).x - (c_arlo_tail_consts.v_tr_l - (c_arlo_tail_consts.v_tr_r * vec2<f32>(tmp1439, tmp1437.z).y))), (mix(tmp1536, tmp1555, clamp(tmp1543, tmp1552.v_zero, tmp1552.v_one)) - (tmp1547 * tmp1545)), clamp(((tmp1424 / c_arlo_tail_consts.v_d_smooth) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp1424 / c_arlo_tail_consts.v_d_smooth) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_tail_consts.v_d_smooth) * (c_stdconsts.v_one - clamp(((tmp1424 / c_arlo_tail_consts.v_d_smooth) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp1084: f32 = opp(c_arlo_legs_consts.v_c0_8);
	let tmp1054: t_arlo_legs_consts = c_arlo_legs_consts;
	let tmp064: vec2<f32> = (tmp099 / tmp066);
	let tmp949: f32 = (tmp948 * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)));
	let tmp947: f32 = (c_arlo_leg_consts.v_c0_21 * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)));
	let tmp1422: f32 = (tmp1424 / c_arlo_tail_consts.v_d_smooth);
	let tmp1248: vec3<f32> = normalize(tmp1252);
	let tmp1241: vec3<f32> = vec3<f32>(tmp1240.v_zero, tmp1240.v_zero, tmp1240.v_one);
	let tmp1553: f32 = clamp(tmp1543, tmp1552.v_zero, tmp1552.v_one);
	let tmp290: f32 = opp(tmp291.v_c3_4);
	let tmp288: f32 = (c_stdconsts.v_two + c_stdconsts.v_dotfive);
	let tmp513: t_stdconsts = c_stdconsts;
	let tmp1305: f32 = (tmp1306 + tmp1304);
	let tmp1085: t_arlo_legs_consts = c_arlo_legs_consts;
	let tmp209: vec2<f32> = tmp195;
	let tmp210: vec2<f32> = tmp205;
	let tmp776: vec3<f32> = mix(tmp777, tmp774, tmp775);
	let tmp1059: t_stdconsts = c_stdconsts;
	let tmp1082: t_stdconsts = c_stdconsts;
	let tmp1194: f32 = abs(((mat3x3<f32>(tmp1243.x, tmp1248.x, tmp1241.x, tmp1243.y, tmp1248.y, tmp1241.y, tmp1243.z, tmp1248.z, tmp1241.z) * (t_position(a_pos).v_pos - vec3<f32>(tmp1076, tmp1075, tmp1085.v_c0_65))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))).z);
	let tmp259: vec3<f32> = cross(tmp258, tmp257);
	let tmp1221: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp702: f32 = (opp(min(((length(((((mat3x3<f32>(normalize(cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776))).x, normalize(tmp776).x, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).x, normalize(cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776))).y, normalize(tmp776).y, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).y, normalize(cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776))).z, normalize(tmp776).z, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(opp(c_arlo_legs_consts2.v_c0_7), opp(c_arlo_legs_consts2.v_c1_6), opp(tmp609.v_c0_65)))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))) - (vec3<f32>(tmp736.v_c0_32, tmp735, tmp734.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((vec3<f32>(((mat3x3<f32>(normalize(cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776))).x, normalize(tmp776).x, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).x, normalize(cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776))).y, normalize(tmp776).y, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).y, normalize(cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776))).z, normalize(tmp776).z, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(opp(c_arlo_legs_consts2.v_c0_7), opp(c_arlo_legs_consts2.v_c1_6), opp(tmp609.v_c0_65)))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))).x, ((mat3x3<f32>(normalize(cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776))).x, normalize(tmp776).x, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).x, normalize(cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776))).y, normalize(tmp776).y, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).y, normalize(cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776))).z, normalize(tmp776).z, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(opp(c_arlo_legs_consts2.v_c0_7), opp(c_arlo_legs_consts2.v_c1_6), opp(tmp609.v_c0_65)))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))).y, abs(((mat3x3<f32>(normalize(cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776))).x, normalize(tmp776).x, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).x, normalize(cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776))).y, normalize(tmp776).y, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).y, normalize(cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776))).z, normalize(tmp776).z, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(opp(c_arlo_legs_consts2.v_c0_7), opp(c_arlo_legs_consts2.v_c1_6), opp(tmp609.v_c0_65)))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))).z)) - vec3<f32>((c_arlo_leg_consts.v_c0_21 * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two))), (opp(c_arlo_leg_consts2.v_c0_08) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two))), c_arlo_leg_consts2.v_c0_26)) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))) - ((length((tmp748 / vec3<f32>(c_arlo_leg_consts.v_c0_4, c_arlo_leg_consts.v_c0_25, c_arlo_leg_consts.v_c0_4))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_arlo_leg_consts.v_c0_4, c_arlo_leg_consts.v_c0_25, c_arlo_leg_consts.v_c0_4))));
	let tmp1002: vec3<f32> = normalize(tmp1001);
	let tmp940: f32 = (c_stdconsts.v_dotfive * tmp937);
	let tmp1429: f32 = (c_arlo_tail_consts.v_tr_r * vec2<f32>(tmp1439, tmp1437.z).y);
	let tmp833: t_stdconsts = c_stdconsts;
	let tmp255: vec3<f32> = (c_arlo_head_mouth_bottom_consts.v_c3_25_c2_12_c0 - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0);
	let tmp253: vec3<f32> = cross(normalize(tmp259), normalize(tmp255));
	let tmp359: f32 = abs(tmp273.v_pos.z);
	let tmp713: f32 = opp(c_arlo_leg_consts2.v_c0_08);
	let tmp314: t_stdconsts = c_stdconsts;
	let tmp766: vec3<f32> = cross(vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one), normalize(tmp776));
	let tmp251: f32 = dot(tmp249, normalize(tmp255));
	let tmp250: f32 = dot(tmp249, normalize(tmp253));
	let tmp245: f32 = dot(tmp243, normalize(tmp255));
	let tmp244: f32 = dot(tmp243, normalize(tmp253));
	let tmp332: vec3<f32> = (tmp313 - tmp314.v_origin);
	let tmp1438: vec2<f32> = vec2<f32>(tmp1439, tmp1437.z);
	let tmp225: t_stdconsts = c_stdconsts;
	let tmp1164: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp019: f32 = opp(c_arlo_head_brows_consts.v_c0_02);
	let tmp831: t_arlo_legs_consts2 = c_arlo_legs_consts2;
	let tmp1181: f32 = (c_stdconsts.v_dotfive * tmp1178);
	let tmp1188: f32 = (c_arlo_leg_consts.v_c0_21 * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)));
	let tmp213: f32 = (tmp215.x * tmp214.y);
	let tmp1190: f32 = (tmp1189 * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)));
	let tmp1195: vec3<f32> = ((mat3x3<f32>(tmp1243.x, tmp1248.x, tmp1241.x, tmp1243.y, tmp1248.y, tmp1241.y, tmp1243.z, tmp1248.z, tmp1241.z) * (t_position(a_pos).v_pos - vec3<f32>(tmp1076, tmp1075, tmp1085.v_c0_65))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two))));
	let tmp980: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp1077: t_stdconsts = c_stdconsts;
	let tmp211: f32 = (tmp214.x * tmp215.y);
	let tmp540: vec3<f32> = vec3<f32>(tmp539.v_zero, tmp539.v_one, tmp539.v_zero);
	let tmp248: t_stdconsts = c_stdconsts;
	let tmp541: vec3<f32> = vec3<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero, c_stdconsts.v_zero);
	let tmp361: vec3<f32> = tmp273.v_pos;
	let tmp923: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp1087: t_position = t_position(a_pos);
	let tmp1432: t_arlo_tail_consts = c_arlo_tail_consts;
	let tmp992: f32 = opp(c_stdconsts.v_one);
	let tmp991: f32 = (tmp1059.v_one * c_stdconsts.v_two);
	let tmp987: t_stdconsts = c_stdconsts;
	let tmp1430: vec2<f32> = tmp1438;
	let tmp985: f32 = length(tmp984);
	let tmp968: vec3<f32> = (tmp972 * (tmp992 + tmp991));
	let tmp955: vec3<f32> = vec3<f32>(tmp954.x, tmp954.y, tmp953);
	let tmp952: vec3<f32> = vec3<f32>(tmp947, tmp949, c_arlo_leg_consts2.v_c0_26);
	let tmp941: f32 = (tmp940 / c_arlo_leg_consts2.v_c0_03);
	let tmp922: f32 = (tmp923.v_c1_85 * (tmp992 + tmp991));
	let tmp912: f32 = (((length(((((mat3x3<f32>(tmp1002.x, tmp1007.x, tmp1000.x, tmp1002.y, tmp1007.y, tmp1000.y, tmp1002.z, tmp1007.z, tmp1000.z) * (t_position(a_pos).v_pos - vec3<f32>(tmp1054.v_c0_8, tmp1060, tmp1054.v_c0_6))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (tmp992 + tmp991))) - vec3<f32>(c_stdconsts.v_zero, tmp922, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - (mix(opp(min(((length(((((mat3x3<f32>(tmp1002.x, tmp1007.x, tmp1000.x, tmp1002.y, tmp1007.y, tmp1000.y, tmp1002.z, tmp1007.z, tmp1000.z) * (t_position(a_pos).v_pos - vec3<f32>(tmp1054.v_c0_8, tmp1060, tmp1054.v_c0_6))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (tmp992 + tmp991))) - tmp968) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp955 - tmp952) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), ((tmp985 - tmp987.v_one) * vmin3(vec3<f32>(tmp980.v_c0_4, tmp980.v_c0_25, tmp980.v_c0_4))), clamp((c_stdconsts.v_dotfive - tmp941), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp941), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp941), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp896: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp772: vec3<f32> = normalize(tmp776);
	let tmp767: vec3<f32> = normalize(tmp766);
	let tmp1548: f32 = mix(tmp1536, tmp1555, tmp1553);
	let tmp749: vec3<f32> = (tmp748 / vec3<f32>(c_arlo_leg_consts.v_c0_4, c_arlo_leg_consts.v_c0_25, c_arlo_leg_consts.v_c0_4));
	let tmp1546: f32 = (tmp1547 * tmp1545);
	let tmp737: vec3<f32> = vec3<f32>(tmp736.v_c0_32, tmp735, tmp734.v_zero);
	let tmp718: f32 = abs(((mat3x3<f32>(tmp767.x, tmp772.x, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).x, tmp767.y, tmp772.y, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).y, tmp767.z, tmp772.z, vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(opp(tmp831.v_c0_7), opp(tmp831.v_c1_6), opp(tmp609.v_c0_65)))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)))).z);
	let tmp530: t_stdconsts = c_stdconsts;
	let tmp714: f32 = (tmp713 * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)));
	let tmp712: f32 = (c_arlo_leg_consts.v_c0_21 * (opp(c_stdconsts.v_one) + (c_stdconsts.v_one * c_stdconsts.v_two)));
	let tmp1247: vec3<f32> = tmp1248;
	let tmp1246: vec3<f32> = tmp1241;
	let tmp1245: vec3<f32> = tmp1243;
	let tmp705: f32 = (c_stdconsts.v_dotfive * tmp702);
	let tmp765: vec3<f32> = vec3<f32>(tmp764.v_zero, tmp764.v_zero, tmp764.v_one);
	let tmp688: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp608: f32 = opp(tmp831.v_c0_2);
	let tmp606: f32 = opp(tmp831.v_c0_9);
	let tmp603: f32 = opp(tmp831.v_c1_6);
	let tmp601: f32 = opp(tmp609.v_c0_8);
	let tmp502: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp600: f32 = opp(tmp830.v_dotfive);
	let tmp1425: t_stdconsts = c_stdconsts;
	let tmp599: f32 = opp(tmp830.v_one);
	let tmp598: f32 = opp(tmp609.v_c0_65);
	let tmp597: f32 = opp(tmp831.v_c0_7);
	let tmp596: f32 = opp(tmp609.v_c0_65);
	let tmp542: vec3<f32> = mix(tmp543, tmp540, tmp541);
	let tmp254: vec3<f32> = normalize(tmp253);
	let tmp238: vec3<f32> = (tmp158.v_pos - c_arlo_head_mouth_bottom_consts.v_c2_7_c2_2_c0);
	let tmp532: vec3<f32> = cross(vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one), normalize(tmp542));
	let tmp1078: vec3<f32> = vec3<f32>(tmp1076, tmp1075, tmp1085.v_c0_65);
	let tmp1428: f32 = (tmp1432.v_tr_l - tmp1429);
	let tmp514: vec3<f32> = (((mat3x3<f32>(normalize(tmp532).x, normalize(tmp542).x, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).x, normalize(tmp532).y, normalize(tmp542).y, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).y, normalize(tmp532).z, normalize(tmp542).z, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(c_arlo_legs_consts2.v_c1_6, opp(c_arlo_legs_consts.v_c1_1), opp(c_arlo_legs_consts2.v_c0_7)))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))) - tmp513.v_origin);
	let tmp183: f32 = (tmp179 * c_stdconsts.v_two);
	let tmp170: vec2<f32> = vec2<f32>(vec3<f32>(dot(tmp238, normalize(tmp255)), dot(tmp238, tmp254), dot(tmp238, normalize(tmp259))).x, vec3<f32>(dot(tmp238, normalize(tmp255)), dot(tmp238, tmp254), dot(tmp238, normalize(tmp259))).y);
	let tmp501: f32 = opp(tmp502.v_c0_06);
	let tmp500: t_stdconsts = c_stdconsts;
	let tmp1416: f32 = (tmp1422 + tmp1425.v_dotfive);
	let tmp1413: f32 = (c_stdconsts.v_dotfive * tmp1412);
	let tmp479: f32 = opp(c_arlo_leg_consts2.v_c0_08);
	let tmp468: f32 = (opp(min(((length(((((mat3x3<f32>(normalize(tmp532).x, normalize(tmp542).x, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).x, normalize(tmp532).y, normalize(tmp542).y, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).y, normalize(tmp532).z, normalize(tmp542).z, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(c_arlo_legs_consts2.v_c1_6, opp(c_arlo_legs_consts.v_c1_1), opp(c_arlo_legs_consts2.v_c0_7)))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))) - (vec3<f32>(tmp502.v_c0_32, tmp501, tmp500.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((vec3<f32>(((mat3x3<f32>(normalize(tmp532).x, normalize(tmp542).x, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).x, normalize(tmp532).y, normalize(tmp542).y, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).y, normalize(tmp532).z, normalize(tmp542).z, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(c_arlo_legs_consts2.v_c1_6, opp(c_arlo_legs_consts.v_c1_1), opp(c_arlo_legs_consts2.v_c0_7)))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))).x, ((mat3x3<f32>(normalize(tmp532).x, normalize(tmp542).x, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).x, normalize(tmp532).y, normalize(tmp542).y, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).y, normalize(tmp532).z, normalize(tmp542).z, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(c_arlo_legs_consts2.v_c1_6, opp(c_arlo_legs_consts.v_c1_1), opp(c_arlo_legs_consts2.v_c0_7)))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))).y, abs(((mat3x3<f32>(normalize(tmp532).x, normalize(tmp542).x, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).x, normalize(tmp532).y, normalize(tmp542).y, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).y, normalize(tmp532).z, normalize(tmp542).z, vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one).z) * (t_position(a_pos).v_pos - vec3<f32>(c_arlo_legs_consts2.v_c1_6, opp(c_arlo_legs_consts.v_c1_1), opp(c_arlo_legs_consts2.v_c0_7)))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))).z)) - vec3<f32>((c_arlo_leg_consts.v_c0_21 * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two))), (tmp479 * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two))), c_arlo_leg_consts2.v_c0_26)) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))) - ((length((tmp514 / vec3<f32>(c_arlo_leg_consts.v_c0_4, c_arlo_leg_consts.v_c0_25, c_arlo_leg_consts.v_c0_4))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_arlo_leg_consts.v_c0_4, c_arlo_leg_consts.v_c0_25, c_arlo_leg_consts.v_c0_4))));
	let tmp345: vec3<f32> = vec3<f32>(tmp342, c_arlo_head_visage_consts.v_c1_7, c_stdconsts.v_zero);
	let tmp344: f32 = opp(c_arlo_head_visage_consts.v_c2_7);
	let tmp331: f32 = dot((tmp322 - tmp314.v_origin), tmp332);
	let tmp330: f32 = dot(tmp332, tmp332);
	let tmp325: vec3<f32> = (tmp332 * clamp((tmp331 / tmp330), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp292: vec3<f32> = vec3<f32>(tmp290, tmp288, c_stdconsts.v_zero);
	let tmp1310: f32 = sqrt(tmp1305);
	let tmp252: vec2<f32> = vec2<f32>(tmp251, tmp250);
	let tmp247: vec2<f32> = vec2<f32>(tmp248.v_zero, tmp248.v_zero);
	let tmp246: vec2<f32> = vec2<f32>(tmp245, tmp244);
	let tmp232: f32 = (tmp225.v_two * tmp173);
	let tmp219: t_stdconsts = c_stdconsts;
	let tmp212: f32 = (tmp213 - tmp211);
	let tmp1058: vec3<f32> = vec3<f32>(tmp1054.v_c0_8, tmp1060, tmp1054.v_c0_6);
	let tmp1052: t_position = t_position(a_pos);
	let tmp208: f32 = (tmp210.x * tmp209.y);
	let tmp206: f32 = (tmp209.x * tmp210.y);
	let tmp1269: vec3<f32> = (tmp1078 - vec3<f32>(tmp1080, tmp1079, tmp1085.v_c0_65));
	let tmp185: f32 = (tmp186 - tmp184);
	let tmp1236: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp360: vec3<f32> = vec3<f32>(tmp361.x, tmp361.y, tmp359);
	let tmp1233: f32 = opp(c_stdconsts.v_one);
	let tmp994: t_stdconsts = c_stdconsts;
	let tmp1232: f32 = (tmp1077.v_zero * c_stdconsts.v_two);
	let tmp1081: vec3<f32> = vec3<f32>(tmp1080, tmp1079, tmp1085.v_c0_65);
	let tmp1228: t_stdconsts = c_stdconsts;
	let tmp1226: f32 = length(tmp1225);
	let tmp1028: vec3<f32> = (tmp1058 - vec3<f32>(tmp832.v_c0_3, tmp1057, tmp1054.v_c0_6));
	let tmp1308: vec3<f32> = tmp1370;
	let tmp120: vec3<f32> = (c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15);
	let tmp119: vec3<f32> = (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15);
	let tmp256: vec3<f32> = normalize(tmp255);
	let tmp1209: vec3<f32> = (tmp1213 * (tmp1233 + tmp1232));
	let tmp1196: vec3<f32> = vec3<f32>(tmp1195.x, tmp1195.y, tmp1194);
	let tmp1042: vec3<f32> = (vec3<f32>(tmp832.v_c0_3, tmp1057, tmp1054.v_c0_6) - vec3<f32>(tmp833.v_dotfive, tmp1055, tmp1054.v_c0_6));
	let tmp1193: vec3<f32> = vec3<f32>(tmp1188, tmp1190, c_arlo_leg_consts2.v_c0_26);
	let tmp333: vec3<f32> = (tmp322 - tmp314.v_origin);
	let tmp042: f32 = (tmp044.x * tmp043.y);
	let tmp040: f32 = (tmp043.x * tmp044.y);
	let tmp1182: f32 = (tmp1181 / c_arlo_leg_consts2.v_c0_03);
	let tmp036: f32 = (tmp038.x * tmp037.y);
	let tmp034: f32 = (tmp037.x * tmp038.y);
	let tmp020: vec3<f32> = vec3<f32>(tmp017.v_zero, tmp019, tmp017.v_zero);
	let tmp1163: f32 = (tmp1164.v_c1_85 * (tmp1233 + tmp1232));
	let tmp260: vec3<f32> = normalize(tmp259);
	let tmp177: t_stdconsts = c_stdconsts;
	let tmp1283: vec3<f32> = (tmp1081 - vec3<f32>(tmp1084, tmp1083, tmp1082.v_dotfive));
	let tmp1053: vec3<f32> = vec3<f32>(tmp833.v_dotfive, tmp1055, tmp1054.v_c0_6);
	let tmp111: vec3<f32> = (c_arlo_head_brows_consts.v_c2_84_c2_50_c0_04 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15);
	let tmp105: vec3<f32> = (c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15);
	let tmp077: vec2<f32> = tmp056;
	let tmp076: vec2<f32> = ((vec2<f32>(dot(tmp111, normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(tmp111, normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(tmp120, tmp119)))).x, vec3<f32>(dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(tmp120, tmp119)))).y)) - tmp064);
	let tmp604: t_stdconsts = c_stdconsts;
	let tmp1235: t_stdconsts = c_stdconsts;
	let tmp067: vec2<f32> = ((vec2<f32>(dot(tmp111, normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(tmp111, normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(tmp120, tmp119)))).x, vec3<f32>(dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(tmp120, tmp119)))).y)) - tmp064);
	let tmp1056: vec3<f32> = vec3<f32>(tmp832.v_c0_3, tmp1057, tmp1054.v_c0_6);
	let tmp057: vec2<f32> = ((vec2<f32>(dot(tmp105, normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(tmp105, normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(tmp120, tmp119)))).x, vec3<f32>(dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(tmp120, tmp119)))).y)) - (vec2<f32>(dot(tmp111, normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(tmp111, normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(tmp120, tmp119)))).x, vec3<f32>(dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(tmp120, tmp119)))).y)));
	let tmp050: vec2<f32> = (vec2<f32>(dot(tmp105, normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(tmp105, normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))))) - vec2<f32>(vec3<f32>(dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(tmp120, tmp119)))).x, vec3<f32>(dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(tmp120, tmp119)))).y));
	let tmp981: vec3<f32> = vec3<f32>(tmp980.v_c0_4, tmp980.v_c0_25, tmp980.v_c0_4);
	let tmp1006: vec3<f32> = tmp1007;
	let tmp1005: vec3<f32> = tmp1000;
	let tmp1004: vec3<f32> = tmp1002;
	let tmp1086: vec3<f32> = vec3<f32>(tmp1084, tmp1083, tmp1082.v_dotfive);
	let tmp049: vec2<f32> = (vec2<f32>(c_stdconsts.v_zero, c_stdconsts.v_zero) - vec2<f32>(vec3<f32>(dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(tmp120, tmp119)))).x, vec3<f32>(dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15))))), dot(((tmp360 + tmp020) - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15), normalize(cross(tmp120, tmp119)))).y));
	let tmp1153: f32 = (((length(((((mat3x3<f32>(tmp1245.x, tmp1247.x, tmp1246.x, tmp1245.y, tmp1247.y, tmp1246.y, tmp1245.z, tmp1247.z, tmp1246.z) * (tmp1087.v_pos - tmp1078)) - (vec3<f32>(tmp1236.v_c0_2, tmp1235.v_zero, tmp1235.v_zero) * (tmp1233 + tmp1232))) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - (mix(opp(min(((length(((((mat3x3<f32>(tmp1245.x, tmp1247.x, tmp1246.x, tmp1245.y, tmp1247.y, tmp1246.y, tmp1245.z, tmp1247.z, tmp1246.z) * (tmp1087.v_pos - tmp1078)) - (vec3<f32>(tmp1236.v_c0_2, tmp1235.v_zero, tmp1235.v_zero) * (tmp1233 + tmp1232))) - tmp1209) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), ((tmp1226 - tmp1228.v_one) * vmin3(vec3<f32>(tmp1221.v_c0_4, tmp1221.v_c0_25, tmp1221.v_c0_4))), clamp((c_stdconsts.v_dotfive - tmp1182), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp1182), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp1182), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp1137: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp1222: vec3<f32> = vec3<f32>(tmp1221.v_c0_4, tmp1221.v_c0_25, tmp1221.v_c0_4);
	let tmp745: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp995: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp719: vec3<f32> = ((mat3x3<f32>(tmp767.x, tmp772.x, tmp765.x, tmp767.y, tmp772.y, tmp765.y, tmp767.z, tmp772.z, tmp765.z) * (t_position(a_pos).v_pos - vec3<f32>(tmp597, tmp603, tmp596))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (tmp604.v_one * c_stdconsts.v_two))));
	let tmp595: f32 = opp(c_arlo_legs_consts2.v_c0_7);
	let tmp112: f32 = dot(tmp111, normalize(cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)))));
	let tmp1205: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp964: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp363: t_arlo_legs_consts2 = c_arlo_legs_consts2;
	let tmp113: f32 = dot(tmp111, normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)));
	let tmp594: f32 = opp(c_arlo_legs_consts.v_c0_6);
	let tmp169: vec2<f32> = (tmp252 - tmp170);
	let tmp677: f32 = (((length(((((mat3x3<f32>(tmp767.x, tmp772.x, tmp765.x, tmp767.y, tmp772.y, tmp765.y, tmp767.z, tmp772.z, tmp765.z) * (t_position(a_pos).v_pos - vec3<f32>(tmp597, tmp603, tmp596))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (tmp604.v_one * c_stdconsts.v_two)))) - vec3<f32>(c_stdconsts.v_zero, (tmp688.v_c1_85 * (opp(c_stdconsts.v_one) + (tmp604.v_one * c_stdconsts.v_two))), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - (mix(opp(min(((length(((((mat3x3<f32>(tmp767.x, tmp772.x, tmp765.x, tmp767.y, tmp772.y, tmp765.y, tmp767.z, tmp772.z, tmp765.z) * (t_position(a_pos).v_pos - vec3<f32>(tmp597, tmp603, tmp596))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (tmp604.v_one * c_stdconsts.v_two)))) - (tmp737 * (opp(c_stdconsts.v_one) + (tmp604.v_one * c_stdconsts.v_two)))) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((vec3<f32>(tmp719.x, tmp719.y, tmp718) - vec3<f32>(tmp712, tmp714, c_arlo_leg_consts2.v_c0_26)) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), ((length(tmp749) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp745.v_c0_4, tmp745.v_c0_25, tmp745.v_c0_4))), clamp((c_stdconsts.v_dotfive - (tmp705 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp705 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp705 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp531: vec3<f32> = vec3<f32>(tmp530.v_zero, tmp530.v_zero, tmp530.v_one);
	let tmp168: vec2<f32> = (tmp247 - tmp170);
	let tmp990: f32 = (tmp992 + tmp991);
	let tmp115: vec3<f32> = cross(normalize(cross(tmp120, tmp119)), normalize((c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15)));
	let tmp1231: f32 = (tmp1233 + tmp1232);
	let tmp189: f32 = (tmp185 * tmp177.v_two);
	let tmp299: vec3<f32> = (tmp360 - tmp292);
	let tmp593: f32 = opp(c_arlo_legs_consts.v_c0_6);
	let tmp167: vec2<f32> = (tmp246 - tmp170);
	let tmp1043: f32 = dot((tmp1052.v_pos - tmp1053), tmp1042);
	let tmp223: f32 = (tmp232 + tmp183);
	let tmp750: f32 = length(tmp749);
	let tmp687: f32 = (tmp688.v_c1_85 * (opp(c_stdconsts.v_one) + (tmp604.v_one * c_stdconsts.v_two)));
	let tmp117: vec3<f32> = (c_arlo_head_brows_consts.v_c2_76_c2_4_c0_18 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15);
	let tmp1180: t_stdconsts = c_stdconsts;
	let tmp1035: vec3<f32> = (tmp1028 * clamp((dot((tmp1052.v_pos - tmp1056), tmp1028) / dot(tmp1028, tmp1028)), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp121: vec3<f32> = cross(tmp120, tmp119);
	let tmp484: f32 = abs(((mat3x3<f32>(normalize(tmp532).x, normalize(tmp542).x, tmp531.x, normalize(tmp532).y, normalize(tmp542).y, tmp531.y, normalize(tmp532).z, normalize(tmp542).z, tmp531.z) * (t_position(a_pos).v_pos - vec3<f32>(tmp363.v_c1_6, opp(c_arlo_legs_consts.v_c1_1), tmp595))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)))).z);
	let tmp1227: f32 = (tmp1226 - tmp1228.v_one);
	let tmp915: f32 = (c_stdconsts.v_dotfive * tmp912);
	let tmp986: f32 = (tmp985 - tmp987.v_one);
	let tmp1229: f32 = vmin3(tmp1222);
	let tmp733: vec3<f32> = (tmp737 * (opp(c_stdconsts.v_one) + (tmp604.v_one * c_stdconsts.v_two)));
	let tmp1426: f32 = clamp(tmp1416, tmp1425.v_zero, tmp1425.v_one);
	let tmp1237: vec3<f32> = vec3<f32>(tmp1236.v_c0_2, tmp1235.v_zero, tmp1235.v_zero);
	let tmp988: f32 = vmin3(tmp981);
	let tmp478: f32 = (c_arlo_leg_consts.v_c0_21 * (opp(c_stdconsts.v_one) + (c_stdconsts.v_zero * c_stdconsts.v_two)));
	let tmp1239: vec3<f32> = (tmp1087.v_pos - tmp1078);
	let tmp1244: mat3x3<f32> = mat3x3<f32>(tmp1245.x, tmp1247.x, tmp1246.x, tmp1245.y, tmp1247.y, tmp1246.y, tmp1245.z, tmp1247.z, tmp1246.z);
	let tmp706: f32 = (tmp705 / c_arlo_leg_consts2.v_c0_03);
	let tmp110: t_stdconsts = c_stdconsts;
	let tmp996: vec3<f32> = vec3<f32>(tmp995.v_c0_2, tmp994.v_zero, tmp994.v_zero);
	let tmp998: vec3<f32> = (tmp1052.v_pos - tmp1058);
	let tmp072: vec2<f32> = tmp067;
	let tmp939: t_stdconsts = c_stdconsts;
	let tmp1071: f32 = (vec2<f32>((mix((mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15), clamp((((c_stdconsts.v_dotfive * ((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * ((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * ((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((((c_stdconsts.v_dotfive * ((mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15), clamp((((c_stdconsts.v_dotfive * ((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * ((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * ((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * ((mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15), clamp((((c_stdconsts.v_dotfive * ((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * ((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * ((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * ((mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp1227 * tmp1229), clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)) + ((clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1180.v_one - clamp((tmp1180.v_dotfive - tmp1182), tmp1180.v_zero, tmp1180.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1153) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15), clamp((((c_stdconsts.v_dotfive * ((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * ((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * ((vec2<f32>(length(((tmp1087.v_pos - tmp1081) - (tmp1269 * clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1081), tmp1269) / dot(tmp1269, tmp1269)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(((tmp1087.v_pos - tmp1086) - (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, (opp(tmp1137.v_c0_75) * tmp1231), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(((((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((tmp1196 - tmp1193) / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one))))).x - (mix((vec2<f32>(tmp1310, tmp1308.z).x - (c_arlo_neck_consts.v_tr_l - (c_arlo_neck_consts.v_tr_t * vec2<f32>(tmp1310, tmp1308.z).y))), (mix((tmp1430.x - tmp1428), (tmp1548 - tmp1546), tmp1426) - ((tmp1426 * tmp1432.v_d_smooth) * (tmp1425.v_one - tmp1426))), clamp(((tmp1413 / c_arlo_neck_consts.v_d_smooth) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp1413 / c_arlo_neck_consts.v_d_smooth) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_neck_consts.v_d_smooth) * (c_stdconsts.v_one - clamp(((tmp1413 / c_arlo_neck_consts.v_d_smooth) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp1290: vec3<f32> = (tmp1283 * clamp((dot((tmp1087.v_pos - tmp1086), tmp1283) / dot(tmp1283, tmp1283)), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp071: vec2<f32> = tmp057;
	let tmp935: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp1003: mat3x3<f32> = mat3x3<f32>(tmp1004.x, tmp1006.x, tmp1005.x, tmp1004.y, tmp1006.y, tmp1005.y, tmp1004.z, tmp1006.z, tmp1005.z);
	let tmp717: vec3<f32> = vec3<f32>(tmp712, tmp714, c_arlo_leg_consts2.v_c0_26);
	let tmp300: t_stdconsts = c_stdconsts;
	let tmp239: f32 = dot(tmp238, tmp260);
	let tmp1270: f32 = dot((tmp1087.v_pos - tmp1081), tmp1269);
	let tmp240: f32 = dot(tmp238, tmp254);
	let tmp585: t_arlo_legs_consts = c_arlo_legs_consts;
	let tmp1282: vec3<f32> = (tmp1087.v_pos - tmp1086);
	let tmp1027: vec3<f32> = (tmp1052.v_pos - tmp1056);
	let tmp1544: f32 = (tmp1548 - tmp1546);
	let tmp241: f32 = dot(tmp238, tmp256);
	let tmp591: f32 = opp(tmp585.v_c1_1);
	let tmp324: vec3<f32> = (tmp333 - tmp325);
	let tmp1029: f32 = dot(tmp1027, tmp1028);
	let tmp1271: f32 = dot(tmp1269, tmp1269);
	let tmp1041: vec3<f32> = (tmp1052.v_pos - tmp1053);
	let tmp1427: f32 = (tmp1430.x - tmp1428);
	let tmp1268: vec3<f32> = (tmp1087.v_pos - tmp1081);
	let tmp329: f32 = (tmp331 / tmp330);
	let tmp207: f32 = (tmp208 - tmp206);
	let tmp1276: vec3<f32> = (tmp1269 * clamp((tmp1270 / tmp1271), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp1156: f32 = (c_stdconsts.v_dotfive * tmp1153);
	let tmp793: vec3<f32> = (vec3<f32>(tmp597, tmp603, tmp596) - vec3<f32>(tmp599, tmp606, tmp598));
	let tmp760: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp327: t_stdconsts = c_stdconsts;
	let tmp807: vec3<f32> = (vec3<f32>(tmp599, tmp606, tmp598) - vec3<f32>(tmp601, tmp608, tmp600));
	let tmp216: f32 = (tmp219.v_two * tmp212);
	let tmp1284: f32 = dot(tmp1282, tmp1283);
	let tmp759: t_stdconsts = c_stdconsts;
	let tmp1285: f32 = dot(tmp1283, tmp1283);
	let tmp364: t_stdconsts = c_stdconsts;
	let tmp1030: f32 = dot(tmp1028, tmp1028);
	let tmp610: vec3<f32> = vec3<f32>(tmp601, tmp608, tmp600);
	let tmp924: vec3<f32> = vec3<f32>(c_stdconsts.v_zero, tmp922, c_stdconsts.v_zero);
	let tmp1049: vec3<f32> = (tmp1042 * clamp((tmp1043 / dot(tmp1042, tmp1042)), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp362: t_position = t_position(a_pos);
	let tmp752: t_stdconsts = c_stdconsts;
	let tmp106: f32 = dot(tmp105, normalize(tmp115));
	let tmp1300: f32 = (c_arlo_neck_consts.v_tr_t * vec2<f32>(tmp1310, tmp1308.z).y);
	let tmp1418: f32 = (tmp1425.v_one - tmp1426);
	let tmp885: f32 = opp(tmp896.v_c0_75);
	let tmp533: vec3<f32> = normalize(tmp532);
	let tmp356: vec3<f32> = (tmp345 - vec3<f32>(tmp344, c_arlo_head_visage_consts.v_c2_36, c_stdconsts.v_zero));
	let tmp588: f32 = opp(tmp363.v_c0_9);
	let tmp1165: vec3<f32> = vec3<f32>(c_stdconsts.v_zero, tmp1163, c_stdconsts.v_zero);
	let tmp1126: f32 = opp(tmp1137.v_c0_75);
	let tmp756: f32 = (tmp604.v_one * tmp759.v_two);
	let tmp1420: f32 = (tmp1426 * tmp1432.v_d_smooth);
	let tmp590: t_stdconsts = c_stdconsts;
	let tmp936: f32 = (tmp939.v_dotfive - tmp941);
	let tmp607: vec3<f32> = vec3<f32>(tmp599, tmp606, tmp598);
	let tmp018: vec3<f32> = (tmp360 + tmp020);
	let tmp035: f32 = (tmp036 - tmp034);
	let tmp503: vec3<f32> = vec3<f32>(tmp502.v_c0_32, tmp501, tmp500.v_zero);
	let tmp956: vec3<f32> = (tmp955 - tmp952);
	let tmp771: vec3<f32> = tmp772;
	let tmp1177: f32 = (tmp1180.v_dotfive - tmp1182);
	let tmp770: vec3<f32> = tmp765;
	let tmp769: vec3<f32> = tmp767;
	let tmp720: vec3<f32> = vec3<f32>(tmp719.x, tmp719.y, tmp718);
	let tmp041: f32 = (tmp042 - tmp040);
	let tmp454: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp1309: vec2<f32> = vec2<f32>(tmp1310, tmp1308.z);
	let tmp046: f32 = (tmp049.x * tmp050.y);
	let tmp515: vec3<f32> = (tmp514 / vec3<f32>(c_arlo_leg_consts.v_c0_4, c_arlo_leg_consts.v_c0_25, c_arlo_leg_consts.v_c0_4));
	let tmp480: f32 = (tmp479 * (opp(c_stdconsts.v_one) + (tmp590.v_zero * c_stdconsts.v_two)));
	let tmp757: f32 = opp(tmp759.v_one);
	let tmp611: t_position = t_position(a_pos);
	let tmp605: vec3<f32> = vec3<f32>(tmp597, tmp603, tmp596);
	let tmp1411: f32 = (tmp1413 / c_arlo_neck_consts.v_d_smooth);
	let tmp048: f32 = (tmp050.x * tmp049.y);
	let tmp471: f32 = (c_stdconsts.v_dotfive * tmp468);
	let tmp661: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp1176: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp284: f32 = (((length((tmp299 / vec3<f32>(c_arlo_legs_consts.v_c0_8, c_stdconsts.v_dotfive, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_arlo_legs_consts.v_c0_8, c_stdconsts.v_dotfive, c_stdconsts.v_two))) - (vec2<f32>(length(tmp324), clamp(tmp329, tmp327.v_zero, tmp327.v_one)).x - (c_arlo_head_mouth_upper_consts.v_c0_12 + (c_arlo_head_mouth_upper_consts.v_c0_04 * smoothstep(tmp300.v_zero, tmp300.v_one, vec2<f32>(length(tmp324), clamp(tmp329, tmp327.v_zero, tmp327.v_one)).y)))));
	let tmp346: vec3<f32> = vec3<f32>(tmp344, c_arlo_head_visage_consts.v_c2_36, c_stdconsts.v_zero);
	let tmp1197: vec3<f32> = (tmp1196 - tmp1193);
	let tmp1044: f32 = dot(tmp1042, tmp1042);
	let tmp073: f32 = (tmp076.x * tmp077.y);
	let tmp511: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp538: vec3<f32> = normalize(tmp542);
	let tmp973: vec3<f32> = (((tmp1003 * tmp998) - (tmp996 * tmp990)) - tmp968);
	let tmp075: f32 = (tmp077.x * tmp076.y);
	let tmp485: vec3<f32> = ((mat3x3<f32>(tmp533.x, tmp538.x, tmp531.x, tmp533.y, tmp538.y, tmp531.y, tmp533.z, tmp538.z, tmp531.z) * (t_position(a_pos).v_pos - vec3<f32>(tmp363.v_c1_6, tmp591, tmp595))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (tmp590.v_zero * c_stdconsts.v_two))));
	let tmp087: t_stdconsts = c_stdconsts;
	let tmp746: vec3<f32> = vec3<f32>(tmp745.v_c0_4, tmp745.v_c0_25, tmp745.v_c0_4);
	let tmp1214: vec3<f32> = (((tmp1244 * tmp1239) - (tmp1237 * tmp1231)) - tmp1209);
	let tmp107: f32 = dot(tmp105, normalize(tmp117));
	let tmp586: f32 = opp(tmp585.v_c0_4);
	let tmp536: vec3<f32> = tmp531;
	let tmp221: f32 = (tmp207 + tmp216);
	let tmp1419: f32 = (tmp1420 * tmp1418);
	let tmp443: f32 = (((length(((((mat3x3<f32>(tmp533.x, tmp538.x, tmp536.x, tmp533.y, tmp538.y, tmp536.y, tmp533.z, tmp538.z, tmp536.z) * (t_position(a_pos).v_pos - vec3<f32>(tmp363.v_c1_6, tmp591, tmp595))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (tmp590.v_zero * c_stdconsts.v_two)))) - vec3<f32>(c_stdconsts.v_zero, (tmp454.v_c1_85 * (opp(c_stdconsts.v_one) + (tmp590.v_zero * c_stdconsts.v_two))), c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - (mix(opp(min(((length(((((mat3x3<f32>(tmp533.x, tmp538.x, tmp536.x, tmp533.y, tmp538.y, tmp536.y, tmp533.z, tmp538.z, tmp536.z) * (t_position(a_pos).v_pos - vec3<f32>(tmp363.v_c1_6, tmp591, tmp595))) - (vec3<f32>(c_arlo_leg_consts.v_c0_2, c_stdconsts.v_zero, c_stdconsts.v_zero) * (opp(c_stdconsts.v_one) + (tmp590.v_zero * c_stdconsts.v_two)))) - (tmp503 * (opp(c_stdconsts.v_one) + (tmp590.v_zero * c_stdconsts.v_two)))) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(((vec3<f32>(tmp485.x, tmp485.y, tmp484) - vec3<f32>(tmp478, tmp480, c_arlo_leg_consts2.v_c0_26)) / (vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(c_arlo_leg_consts.v_c0_1, c_arlo_leg_consts.v_c0_2, c_arlo_leg_consts.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), ((length(tmp515) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp511.v_c0_4, tmp511.v_c0_25, tmp511.v_c0_4))), clamp((c_stdconsts.v_dotfive - (tmp471 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp471 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp471 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp729: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp957: vec3<f32> = (tmp956 / (vec3<f32>(tmp964.v_c0_1, tmp964.v_c0_2, tmp964.v_c0_15) * c_arlo_leg_consts2.v_c0_95));
	let tmp755: f32 = (tmp757 + tmp756);
	let tmp897: f32 = (tmp885 * tmp990);
	let tmp650: f32 = opp(tmp661.v_c0_75);
	let tmp453: f32 = (tmp454.v_c1_85 * (opp(c_stdconsts.v_one) + (tmp590.v_zero * c_stdconsts.v_two)));
	let tmp1405: f32 = (tmp1411 + c_stdconsts.v_dotfive);
	let tmp1421: f32 = mix(tmp1427, tmp1544, tmp1426);
	let tmp875: f32 = (((length(((((tmp1003 * tmp998) - (tmp996 * tmp990)) - vec3<f32>(c_stdconsts.v_zero, tmp897, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(((((tmp1003 * tmp998) - (tmp996 * tmp990)) - tmp924) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(opp(min(((length((tmp973 / (vec3<f32>(tmp964.v_c0_1, tmp964.v_c0_2, tmp964.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp964.v_c0_1, tmp964.v_c0_2, tmp964.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(tmp957) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp964.v_c0_1, tmp964.v_c0_2, tmp964.v_c0_15) * c_arlo_leg_consts2.v_c0_95))))), (tmp986 * tmp988), clamp(tmp936, tmp939.v_zero, tmp939.v_one)) + ((clamp(tmp936, tmp939.v_zero, tmp939.v_one) * tmp935.v_c0_03) * (tmp939.v_one - clamp(tmp936, tmp939.v_zero, tmp939.v_one)))), clamp((c_stdconsts.v_dotfive - (tmp915 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp915 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp915 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp522: f32 = (tmp590.v_zero * c_stdconsts.v_two);
	let tmp289: t_stdconsts = c_stdconsts;
	let tmp224: f32 = (tmp223 + tmp189);
	let tmp945: f32 = (tmp939.v_one - clamp(tmp936, tmp939.v_zero, tmp939.v_one));
	let tmp523: f32 = opp(c_stdconsts.v_one);
	let tmp227: vec2<f32> = mix(tmp169, tmp168, vec2<f32>(clamp((tmp221 / tmp224), c_stdconsts.v_zero, c_stdconsts.v_one), clamp((tmp221 / tmp224), c_stdconsts.v_zero, c_stdconsts.v_one)));
	let tmp1286: f32 = (tmp1284 / tmp1285);
	let tmp526: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp229: vec2<f32> = mix(tmp168, tmp167, vec2<f32>(clamp((tmp221 / tmp224), c_stdconsts.v_zero, c_stdconsts.v_one), clamp((tmp221 / tmp224), c_stdconsts.v_zero, c_stdconsts.v_one)));
	let tmp899: f32 = (((length(((((tmp1003 * tmp998) - (tmp996 * tmp990)) - tmp924) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length((tmp973 / (vec3<f32>(tmp964.v_c0_1, tmp964.v_c0_2, tmp964.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp964.v_c0_1, tmp964.v_c0_2, tmp964.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length(tmp957) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp964.v_c0_1, tmp964.v_c0_2, tmp964.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))));
	let tmp768: mat3x3<f32> = mat3x3<f32>(tmp769.x, tmp771.x, tmp770.x, tmp769.y, tmp771.y, tmp770.y, tmp769.z, tmp771.z, tmp770.z);
	let tmp1414: t_stdconsts = c_stdconsts;
	let tmp499: vec3<f32> = (tmp503 * (tmp523 + tmp522));
	let tmp738: vec3<f32> = (((tmp768 * (tmp611.v_pos - tmp605)) - (vec3<f32>(tmp760.v_c0_2, tmp759.v_zero, tmp759.v_zero) * tmp755)) - tmp733);
	let tmp1157: f32 = (tmp1156 / c_arlo_leg_consts2.v_c0_03);
	let tmp518: t_stdconsts = c_stdconsts;
	let tmp1277: vec3<f32> = (tmp1268 - tmp1276);
	let tmp814: vec3<f32> = (tmp807 * clamp((dot((tmp611.v_pos - tmp610), tmp807) / dot(tmp807, tmp807)), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp1272: f32 = (tmp1270 / tmp1271);
	let tmp584: vec3<f32> = vec3<f32>(tmp364.v_dotfive, tmp586, tmp593);
	let tmp792: vec3<f32> = (tmp611.v_pos - tmp607);
	let tmp1260: f32 = ((vec2<f32>(length(tmp1277), clamp(tmp1272, c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length((tmp1282 - tmp1290)), clamp(tmp1286, c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15));
	let tmp039: t_stdconsts = c_stdconsts;
	let tmp122: vec3<f32> = normalize(tmp121);
	let tmp1234: vec3<f32> = (tmp1237 * tmp1231);
	let tmp114: vec2<f32> = vec2<f32>(tmp113, tmp112);
	let tmp1215: vec3<f32> = (tmp1214 / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95));
	let tmp109: vec2<f32> = vec2<f32>(tmp110.v_zero, tmp110.v_zero);
	let tmp108: vec2<f32> = vec2<f32>(tmp107, tmp106);
	let tmp094: f32 = (tmp087.v_two * tmp035);
	let tmp1047: t_stdconsts = c_stdconsts;
	let tmp081: t_stdconsts = c_stdconsts;
	let tmp242: vec3<f32> = vec3<f32>(tmp241, tmp240, tmp239);
	let tmp1206: vec3<f32> = vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15);
	let tmp074: f32 = (tmp075 - tmp073);
	let tmp070: f32 = (tmp072.x * tmp071.y);
	let tmp1291: vec3<f32> = (tmp1282 - tmp1290);
	let tmp1140: f32 = (((length(((((tmp1244 * tmp1239) - tmp1234) - tmp1165) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length(tmp1215) - c_stdconsts.v_one) * vmin3((tmp1206 * c_arlo_leg_consts2.v_c0_95))), ((length((tmp1197 / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))));
	let tmp800: vec3<f32> = (tmp793 * clamp((dot(tmp792, tmp793) / dot(tmp793, tmp793)), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp068: f32 = (tmp071.x * tmp072.y);
	let tmp118: vec3<f32> = normalize(tmp117);
	let tmp751: f32 = (tmp750 - tmp752.v_one);
	let tmp1207: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp1198: vec3<f32> = (tmp1197 / (vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15) * tmp1207.v_c0_95));
	let tmp1301: vec2<f32> = tmp1309;
	let tmp1138: f32 = (tmp1126 * tmp1231);
	let tmp1191: vec3<f32> = vec3<f32>(tmp1205.v_c0_1, tmp1205.v_c0_2, tmp1205.v_c0_15);
	let tmp047: f32 = (tmp048 - tmp046);
	let tmp525: t_stdconsts = c_stdconsts;
	let tmp1186: f32 = (tmp1180.v_one - clamp(tmp1177, tmp1180.v_zero, tmp1180.v_one));
	let tmp1299: f32 = (c_arlo_neck_consts.v_tr_l - tmp1300);
	let tmp1184: f32 = (clamp(tmp1177, tmp1180.v_zero, tmp1180.v_one) * tmp1176.v_c0_03);
	let tmp559: vec3<f32> = (vec3<f32>(tmp363.v_c1_6, tmp591, tmp595) - vec3<f32>(tmp585.v_c0_8, tmp588, tmp594));
	let tmp721: vec3<f32> = (tmp720 - tmp717);
	let tmp573: vec3<f32> = (vec3<f32>(tmp585.v_c0_8, tmp588, tmp594) - tmp584);
	let tmp1175: f32 = opp(min(((length(tmp1215) - c_stdconsts.v_one) * vmin3((tmp1206 * tmp1207.v_c0_95))), ((length(tmp1198) - c_stdconsts.v_one) * vmin3((tmp1191 * tmp1207.v_c0_95)))));
	let tmp1168: vec3<f32> = (((tmp1244 * tmp1239) - tmp1234) - tmp1165);
	let tmp966: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp516: f32 = length(tmp515);
	let tmp763: vec3<f32> = (tmp611.v_pos - tmp605);
	let tmp587: vec3<f32> = vec3<f32>(tmp585.v_c0_8, tmp588, tmp594);
	let tmp583: t_position = t_position(a_pos);
	let tmp761: vec3<f32> = vec3<f32>(tmp760.v_c0_2, tmp759.v_zero, tmp759.v_zero);
	let tmp281: f32 = (c_stdconsts.v_dotfive * tmp284);
	let tmp589: vec3<f32> = vec3<f32>(tmp363.v_c1_6, tmp591, tmp595);
	let tmp537: vec3<f32> = tmp538;
	let tmp535: vec3<f32> = tmp533;
	let tmp286: t_arlo_legs_consts = c_arlo_legs_consts;
	let tmp1116: f32 = (((length(((((tmp1244 * tmp1239) - tmp1234) - vec3<f32>(c_stdconsts.v_zero, tmp1138, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length((tmp1168 / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(tmp1175, (tmp1227 * tmp1229), clamp(tmp1177, tmp1180.v_zero, tmp1180.v_one)) + (tmp1184 * tmp1186)), clamp((c_stdconsts.v_dotfive - tmp1157), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp1157), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp1157), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp472: f32 = (tmp471 / c_arlo_leg_consts2.v_c0_03);
	let tmp298: vec3<f32> = (tmp299 / vec3<f32>(tmp286.v_c0_8, tmp289.v_dotfive, tmp289.v_two));
	let tmp228: vec2<f32> = vec2<f32>(clamp((tmp221 / tmp224), c_stdconsts.v_zero, c_stdconsts.v_one), clamp((tmp221 / tmp224), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp943: f32 = (clamp(tmp936, tmp939.v_zero, tmp939.v_one) * tmp935.v_c0_03);
	let tmp927: vec3<f32> = (((tmp1003 * tmp998) - (tmp996 * tmp990)) - tmp924);
	let tmp116: vec3<f32> = normalize(tmp115);
	let tmp100: vec3<f32> = (tmp018 - c_arlo_head_brows_consts.v_c2_81_c2_52_c0_15);
	let tmp301: f32 = smoothstep(tmp300.v_zero, tmp300.v_one, vec2<f32>(length(tmp324), clamp(tmp329, tmp327.v_zero, tmp327.v_one)).y);
	let tmp045: f32 = (tmp041 * tmp039.v_two);
	let tmp032: vec2<f32> = vec2<f32>(vec3<f32>(dot(tmp100, tmp118), dot(tmp100, tmp116), dot(tmp100, tmp122)).x, vec3<f32>(dot(tmp100, tmp118), dot(tmp100, tmp116), dot(tmp100, tmp122)).y);
	let tmp950: vec3<f32> = vec3<f32>(tmp964.v_c0_1, tmp964.v_c0_2, tmp964.v_c0_15);
	let tmp1179: f32 = clamp(tmp1177, tmp1180.v_zero, tmp1180.v_one);
	let tmp1088: vec3<f32> = (tmp1244 * tmp1239);
	let tmp1072: f32 = (c_stdconsts.v_dotfive * tmp1071);
	let tmp938: f32 = clamp(tmp936, tmp939.v_zero, tmp939.v_one);
	let tmp934: f32 = opp(min(((length((tmp973 / (vec3<f32>(tmp964.v_c0_1, tmp964.v_c0_2, tmp964.v_c0_15) * tmp966.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp964.v_c0_1, tmp964.v_c0_2, tmp964.v_c0_15) * tmp966.v_c0_95))), ((length(tmp957) - c_stdconsts.v_one) * vmin3((tmp950 * tmp966.v_c0_95)))));
	let tmp1288: t_stdconsts = c_stdconsts;
	let tmp323: f32 = length(tmp324);
	let tmp1274: t_stdconsts = c_stdconsts;
	let tmp989: f32 = (tmp986 * tmp988);
	let tmp809: f32 = dot(tmp807, tmp807);
	let tmp1050: vec3<f32> = (tmp1041 - tmp1049);
	let tmp1230: f32 = (tmp1227 * tmp1229);
	let tmp806: vec3<f32> = (tmp611.v_pos - tmp610);
	let tmp1045: f32 = (tmp1043 / tmp1044);
	let tmp512: vec3<f32> = vec3<f32>(tmp511.v_c0_4, tmp511.v_c0_25, tmp511.v_c0_4);
	let tmp700: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp349: vec3<f32> = (tmp356 * clamp((dot((tmp362.v_pos - tmp346), tmp356) / dot(tmp356, tmp356)), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp1036: vec3<f32> = (tmp1027 - tmp1035);
	let tmp354: f32 = dot(tmp356, tmp356);
	let tmp753: f32 = vmin3(tmp746);
	let tmp355: f32 = dot((tmp362.v_pos - tmp346), tmp356);
	let tmp1303: t_arlo_neck_consts = c_arlo_neck_consts;
	let tmp1033: t_stdconsts = c_stdconsts;
	let tmp704: t_stdconsts = c_stdconsts;
	let tmp483: vec3<f32> = vec3<f32>(tmp478, tmp480, c_arlo_leg_consts2.v_c0_26);
	let tmp1031: f32 = (tmp1029 / tmp1030);
	let tmp357: vec3<f32> = (tmp362.v_pos - tmp346);
	let tmp328: f32 = clamp(tmp329, tmp327.v_zero, tmp327.v_one);
	let tmp1019: f32 = ((vec2<f32>(length(tmp1036), clamp(tmp1031, tmp1033.v_zero, tmp1033.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(tmp1050), clamp(tmp1045, tmp1047.v_zero, tmp1047.v_one)).x - c_arlo_leg_consts.v_c0_15));
	let tmp916: f32 = (tmp915 / c_arlo_leg_consts2.v_c0_03);
	let tmp794: f32 = dot(tmp792, tmp793);
	let tmp808: f32 = dot(tmp806, tmp807);
	let tmp486: vec3<f32> = vec3<f32>(tmp485.x, tmp485.y, tmp484);
	let tmp993: vec3<f32> = (tmp996 * tmp990);
	let tmp701: f32 = (tmp704.v_dotfive - tmp706);
	let tmp689: vec3<f32> = vec3<f32>(c_stdconsts.v_zero, tmp687, c_stdconsts.v_zero);
	let tmp795: f32 = dot(tmp793, tmp793);
	let tmp974: vec3<f32> = (tmp973 / (vec3<f32>(tmp964.v_c0_1, tmp964.v_c0_2, tmp964.v_c0_15) * tmp966.v_c0_95));
	let tmp680: f32 = (c_stdconsts.v_dotfive * tmp677);
	let tmp847: vec3<f32> = (tmp1003 * tmp998);
	let tmp427: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp965: vec3<f32> = vec3<f32>(tmp964.v_c0_1, tmp964.v_c0_2, tmp964.v_c0_15);
	let tmp495: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp031: vec2<f32> = (tmp114 - tmp032);
	let tmp030: vec2<f32> = (tmp109 - tmp032);
	let tmp521: f32 = (tmp523 + tmp522);
	let tmp926: t_stdconsts = c_stdconsts;
	let tmp222: f32 = (tmp221 / tmp224);
	let tmp902: f32 = (c_stdconsts.v_dotfive * tmp899);
	let tmp997: vec3<f32> = (tmp847 - tmp993);
	let tmp967: vec3<f32> = (tmp965 * tmp966.v_c0_95);
	let tmp796: f32 = (tmp794 / tmp795);
	let tmp878: f32 = (c_stdconsts.v_dotfive * tmp875);
	let tmp1167: t_stdconsts = c_stdconsts;
	let tmp230: vec2<f32> = mix(tmp227, tmp229, tmp228);
	let tmp975: f32 = length(tmp974);
	let tmp1409: f32 = (clamp(tmp1405, tmp1414.v_zero, tmp1414.v_one) * tmp1303.v_d_smooth);
	let tmp517: f32 = (tmp516 - tmp518.v_one);
	let tmp1417: f32 = (tmp1421 - tmp1419);
	let tmp353: f32 = (tmp355 / tmp354);
	let tmp815: vec3<f32> = (tmp806 - tmp814);
	let tmp1192: vec3<f32> = (tmp1191 * tmp1207.v_c0_95);
	let tmp1143: f32 = (c_stdconsts.v_dotfive * tmp1140);
	let tmp1155: t_stdconsts = c_stdconsts;
	let tmp699: f32 = opp(min(((length((tmp738 / (vec3<f32>(tmp729.v_c0_1, tmp729.v_c0_2, tmp729.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp729.v_c0_1, tmp729.v_c0_2, tmp729.v_c0_15) * c_arlo_leg_consts2.v_c0_95))), ((length((tmp721 / (vec3<f32>(tmp729.v_c0_1, tmp729.v_c0_2, tmp729.v_c0_15) * c_arlo_leg_consts2.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp729.v_c0_1, tmp729.v_c0_2, tmp729.v_c0_15) * c_arlo_leg_consts2.v_c0_95)))));
	let tmp534: mat3x3<f32> = mat3x3<f32>(tmp535.x, tmp537.x, tmp536.x, tmp535.y, tmp537.y, tmp536.y, tmp535.z, tmp537.z, tmp536.z);
	let tmp470: t_stdconsts = c_stdconsts;
	let tmp029: vec2<f32> = (tmp108 - tmp032);
	let tmp1070: f32 = (tmp1072 / c_arlo_leg_consts.v_c0_2);
	let tmp1259: f32 = (c_stdconsts.v_dotfive * tmp1260);
	let tmp928: vec3<f32> = (tmp927 / vec3<f32>(tmp926.v_two, tmp926.v_two, tmp926.v_two));
	let tmp914: t_stdconsts = c_stdconsts;
	let tmp1238: vec3<f32> = (tmp1088 - tmp1234);
	let tmp944: f32 = (tmp943 * tmp945);
	let tmp561: f32 = dot(tmp559, tmp559);
	let tmp1415: f32 = clamp(tmp1405, tmp1414.v_zero, tmp1414.v_one);
	let tmp467: f32 = (tmp470.v_dotfive - tmp472);
	let tmp302: f32 = (c_arlo_head_mouth_upper_consts.v_c0_04 * tmp301);
	let tmp1292: f32 = length(tmp1291);
	let tmp171: vec3<f32> = tmp242;
	let tmp1136: vec3<f32> = vec3<f32>(c_stdconsts.v_zero, tmp1138, c_stdconsts.v_zero);
	let tmp051: f32 = (tmp047 * tmp039.v_two);
	let tmp801: vec3<f32> = (tmp792 - tmp800);
	let tmp730: vec3<f32> = vec3<f32>(tmp729.v_c0_1, tmp729.v_c0_2, tmp729.v_c0_15);
	let tmp1218: t_stdconsts = c_stdconsts;
	let tmp731: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp343: t_stdconsts = c_stdconsts;
	let tmp487: vec3<f32> = (tmp486 - tmp483);
	let tmp895: vec3<f32> = vec3<f32>(c_stdconsts.v_zero, tmp897, c_stdconsts.v_zero);
	let tmp1216: f32 = length(tmp1215);
	let tmp416: f32 = opp(tmp427.v_c0_75);
	let tmp297: f32 = length(tmp298);
	let tmp103: f32 = dot(tmp100, tmp118);
	let tmp102: f32 = dot(tmp100, tmp116);
	let tmp101: f32 = dot(tmp100, tmp122);
	let tmp295: t_stdconsts = c_stdconsts;
	let tmp692: vec3<f32> = (((tmp768 * tmp763) - (tmp761 * tmp755)) - tmp689);
	let tmp163: vec2<f32> = vec2<f32>(vec3<f32>(tmp230.x, tmp230.y, clamp(tmp222, c_stdconsts.v_zero, c_stdconsts.v_one)).x, vec3<f32>(tmp230.x, tmp230.y, clamp(tmp222, c_stdconsts.v_zero, c_stdconsts.v_one)).y);
	let tmp664: f32 = (((length((tmp692 / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length((tmp738 / (tmp730 * tmp731.v_c0_95))) - c_stdconsts.v_one) * vmin3((tmp730 * tmp731.v_c0_95))), ((length((tmp721 / (vec3<f32>(tmp729.v_c0_1, tmp729.v_c0_2, tmp729.v_c0_15) * tmp731.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp729.v_c0_1, tmp729.v_c0_2, tmp729.v_c0_15) * tmp731.v_c0_95)))));
	let tmp085: f32 = (tmp094 + tmp045);
	let tmp662: f32 = (tmp650 * tmp755);
	let tmp977: t_stdconsts = c_stdconsts;
	let tmp575: f32 = dot(tmp573, tmp573);
	let tmp960: t_stdconsts = c_stdconsts;
	let tmp1298: f32 = (tmp1301.x - tmp1299);
	let tmp1037: f32 = length(tmp1036);
	let tmp078: f32 = (tmp081.v_two * tmp074);
	let tmp958: f32 = length(tmp957);
	let tmp446: f32 = (c_stdconsts.v_dotfive * tmp443);
	let tmp1201: t_stdconsts = c_stdconsts;
	let tmp580: vec3<f32> = (tmp573 * clamp((dot((tmp583.v_pos - tmp584), tmp573) / tmp575), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp069: f32 = (tmp070 - tmp068);
	let tmp466: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp842: f32 = (vec2<f32>((mix((mix(((length(((tmp997 - tmp895) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp928) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp926.v_two, tmp926.v_two, tmp926.v_two))), (mix(tmp934, tmp989, tmp938) + tmp944), clamp((tmp914.v_dotfive - tmp916), tmp914.v_zero, tmp914.v_one)) + ((clamp((tmp914.v_dotfive - tmp916), tmp914.v_zero, tmp914.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp914.v_one - clamp((tmp914.v_dotfive - tmp916), tmp914.v_zero, tmp914.v_one)))), clamp((c_stdconsts.v_dotfive - (tmp878 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp878 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp878 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix((vec2<f32>(tmp1037, clamp(tmp1031, tmp1033.v_zero, tmp1033.v_one)).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(length(tmp1050), clamp(tmp1045, tmp1047.v_zero, tmp1047.v_one)).x - c_arlo_leg_consts.v_c0_15), clamp((((c_stdconsts.v_dotfive * tmp1019) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * tmp1019) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * tmp1019) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((((c_stdconsts.v_dotfive * ((mix(((length(((tmp997 - tmp895) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp928) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp926.v_two, tmp926.v_two, tmp926.v_two))), (mix(tmp934, tmp989, tmp938) + tmp944), clamp((tmp914.v_dotfive - tmp916), tmp914.v_zero, tmp914.v_one)) + ((clamp((tmp914.v_dotfive - tmp916), tmp914.v_zero, tmp914.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp914.v_one - clamp((tmp914.v_dotfive - tmp916), tmp914.v_zero, tmp914.v_one)))), clamp((c_stdconsts.v_dotfive - (tmp878 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp878 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp878 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(tmp1037, clamp(tmp1031, tmp1033.v_zero, tmp1033.v_one)).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(length(tmp1050), clamp(tmp1045, tmp1047.v_zero, tmp1047.v_one)).x - c_arlo_leg_consts.v_c0_15), clamp((((c_stdconsts.v_dotfive * tmp1019) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * tmp1019) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * tmp1019) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * ((mix(((length(((tmp997 - tmp895) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp928) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp926.v_two, tmp926.v_two, tmp926.v_two))), (mix(tmp934, tmp989, tmp938) + tmp944), clamp((tmp914.v_dotfive - tmp916), tmp914.v_zero, tmp914.v_one)) + ((clamp((tmp914.v_dotfive - tmp916), tmp914.v_zero, tmp914.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp914.v_one - clamp((tmp914.v_dotfive - tmp916), tmp914.v_zero, tmp914.v_one)))), clamp((c_stdconsts.v_dotfive - (tmp878 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp878 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp878 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(tmp1037, clamp(tmp1031, tmp1033.v_zero, tmp1033.v_one)).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(length(tmp1050), clamp(tmp1045, tmp1047.v_zero, tmp1047.v_one)).x - c_arlo_leg_consts.v_c0_15), clamp((((c_stdconsts.v_dotfive * tmp1019) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * tmp1019) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * tmp1019) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * ((mix(((length(((tmp997 - tmp895) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp928) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp926.v_two, tmp926.v_two, tmp926.v_two))), (mix(tmp934, tmp989, tmp938) + tmp944), clamp((tmp914.v_dotfive - tmp916), tmp914.v_zero, tmp914.v_one)) + ((clamp((tmp914.v_dotfive - tmp916), tmp914.v_zero, tmp914.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp914.v_one - clamp((tmp914.v_dotfive - tmp916), tmp914.v_zero, tmp914.v_one)))), clamp((c_stdconsts.v_dotfive - (tmp878 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp878 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp878 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(tmp1037, clamp(tmp1031, tmp1033.v_zero, tmp1033.v_one)).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(length(tmp1050), clamp(tmp1045, tmp1047.v_zero, tmp1047.v_one)).x - c_arlo_leg_consts.v_c0_15), clamp((((c_stdconsts.v_dotfive * tmp1019) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * tmp1019) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * tmp1019) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix(((length(((tmp997 - tmp895) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp928) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp926.v_two, tmp926.v_two, tmp926.v_two))), min(((tmp975 - tmp977.v_one) * vmin3(tmp967)), ((tmp958 - tmp960.v_one) * vmin3((tmp950 * tmp966.v_c0_95)))), clamp((c_stdconsts.v_dotfive - (tmp902 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp902 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp902 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((tmp997 - tmp895) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(tmp928) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp926.v_two, tmp926.v_two, tmp926.v_two))), min(((tmp975 - tmp977.v_one) * vmin3(tmp967)), ((tmp958 - tmp960.v_one) * vmin3((tmp950 * tmp966.v_c0_95)))), clamp((c_stdconsts.v_dotfive - (tmp902 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp902 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp902 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((tmp997 - tmp895) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(tmp928) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp926.v_two, tmp926.v_two, tmp926.v_two))), min(((tmp975 - tmp977.v_one) * vmin3(tmp967)), ((tmp958 - tmp960.v_one) * vmin3((tmp950 * tmp966.v_c0_95)))), clamp((c_stdconsts.v_dotfive - (tmp902 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp902 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp902 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((tmp997 - tmp895) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(tmp928) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp926.v_two, tmp926.v_two, tmp926.v_two))), min(((tmp975 - tmp977.v_one) * vmin3(tmp967)), ((tmp958 - tmp960.v_one) * vmin3((tmp950 * tmp966.v_c0_95)))), clamp((c_stdconsts.v_dotfive - (tmp902 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp902 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp902 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one))))).x - (mix(vec2<f32>((mix((mix(((length(((tmp1238 - tmp1136) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length((tmp1168 / vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))), (mix(tmp1175, tmp1230, tmp1179) + (tmp1184 * tmp1186)), clamp((tmp1155.v_dotfive - tmp1157), tmp1155.v_zero, tmp1155.v_one)) + ((clamp((tmp1155.v_dotfive - tmp1157), tmp1155.v_zero, tmp1155.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1155.v_one - clamp((tmp1155.v_dotfive - tmp1157), tmp1155.v_zero, tmp1155.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1116) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1116) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1116) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix((vec2<f32>(length(tmp1277), clamp(tmp1272, tmp1274.v_zero, tmp1274.v_one)).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(tmp1292, clamp(tmp1286, tmp1288.v_zero, tmp1288.v_one)).x - c_arlo_leg_consts.v_c0_15), clamp(((tmp1259 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp1259 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp1259 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((((c_stdconsts.v_dotfive * ((mix(((length(((tmp1238 - tmp1136) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length((tmp1168 / vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))), (mix(tmp1175, tmp1230, tmp1179) + (tmp1184 * tmp1186)), clamp((tmp1155.v_dotfive - tmp1157), tmp1155.v_zero, tmp1155.v_one)) + ((clamp((tmp1155.v_dotfive - tmp1157), tmp1155.v_zero, tmp1155.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1155.v_one - clamp((tmp1155.v_dotfive - tmp1157), tmp1155.v_zero, tmp1155.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1116) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1116) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1116) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(length(tmp1277), clamp(tmp1272, tmp1274.v_zero, tmp1274.v_one)).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(tmp1292, clamp(tmp1286, tmp1288.v_zero, tmp1288.v_one)).x - c_arlo_leg_consts.v_c0_15), clamp(((tmp1259 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp1259 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp1259 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * ((mix(((length(((tmp1238 - tmp1136) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length((tmp1168 / vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))), (mix(tmp1175, tmp1230, tmp1179) + (tmp1184 * tmp1186)), clamp((tmp1155.v_dotfive - tmp1157), tmp1155.v_zero, tmp1155.v_one)) + ((clamp((tmp1155.v_dotfive - tmp1157), tmp1155.v_zero, tmp1155.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1155.v_one - clamp((tmp1155.v_dotfive - tmp1157), tmp1155.v_zero, tmp1155.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1116) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1116) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1116) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(length(tmp1277), clamp(tmp1272, tmp1274.v_zero, tmp1274.v_one)).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(tmp1292, clamp(tmp1286, tmp1288.v_zero, tmp1288.v_one)).x - c_arlo_leg_consts.v_c0_15), clamp(((tmp1259 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp1259 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp1259 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * ((mix(((length(((tmp1238 - tmp1136) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length((tmp1168 / vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))), (mix(tmp1175, tmp1230, tmp1179) + (tmp1184 * tmp1186)), clamp((tmp1155.v_dotfive - tmp1157), tmp1155.v_zero, tmp1155.v_one)) + ((clamp((tmp1155.v_dotfive - tmp1157), tmp1155.v_zero, tmp1155.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp1155.v_one - clamp((tmp1155.v_dotfive - tmp1157), tmp1155.v_zero, tmp1155.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1116) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1116) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1116) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(length(tmp1277), clamp(tmp1272, tmp1274.v_zero, tmp1274.v_one)).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(tmp1292, clamp(tmp1286, tmp1288.v_zero, tmp1288.v_one)).x - c_arlo_leg_consts.v_c0_15), clamp(((tmp1259 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp1259 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp1259 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix(((length(((tmp1238 - tmp1136) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length((tmp1168 / vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))), min(((tmp1216 - tmp1218.v_one) * vmin3((tmp1206 * tmp1207.v_c0_95))), ((length(tmp1198) - tmp1201.v_one) * vmin3(tmp1192))), clamp((c_stdconsts.v_dotfive - (tmp1143 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp1143 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp1143 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((tmp1238 - tmp1136) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length((tmp1168 / vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))), min(((tmp1216 - tmp1218.v_one) * vmin3((tmp1206 * tmp1207.v_c0_95))), ((length(tmp1198) - tmp1201.v_one) * vmin3(tmp1192))), clamp((c_stdconsts.v_dotfive - (tmp1143 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp1143 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp1143 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((tmp1238 - tmp1136) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length((tmp1168 / vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))), min(((tmp1216 - tmp1218.v_one) * vmin3((tmp1206 * tmp1207.v_c0_95))), ((length(tmp1198) - tmp1201.v_one) * vmin3(tmp1192))), clamp((c_stdconsts.v_dotfive - (tmp1143 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp1143 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp1143 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((tmp1238 - tmp1136) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length((tmp1168 / vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two))), min(((tmp1216 - tmp1218.v_one) * vmin3((tmp1206 * tmp1207.v_c0_95))), ((length(tmp1198) - tmp1201.v_one) * vmin3(tmp1192))), clamp((c_stdconsts.v_dotfive - (tmp1143 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp1143 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp1143 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one))))).x, (mix(tmp1298, tmp1417, tmp1415) - (tmp1409 * (tmp1414.v_one - tmp1415))), clamp((tmp1070 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((tmp1070 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_2) * (c_stdconsts.v_one - clamp((tmp1070 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp1018: f32 = (c_stdconsts.v_dotfive * tmp1019);
	let tmp558: vec3<f32> = (tmp583.v_pos - tmp587);
	let tmp455: vec3<f32> = vec3<f32>(c_stdconsts.v_zero, tmp453, c_stdconsts.v_zero);
	let tmp1199: f32 = length(tmp1198);
	let tmp754: f32 = (tmp751 * tmp753);
	let tmp574: f32 = dot((tmp583.v_pos - tmp584), tmp573);
	let tmp715: vec3<f32> = vec3<f32>(tmp729.v_c0_1, tmp729.v_c0_2, tmp729.v_c0_15);
	let tmp1046: f32 = clamp(tmp1045, tmp1047.v_zero, tmp1047.v_one);
	let tmp640: f32 = (((length(((((tmp768 * tmp763) - (tmp761 * tmp755)) - vec3<f32>(c_stdconsts.v_zero, tmp662, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length((tmp692 / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(tmp699, tmp754, clamp(tmp701, tmp704.v_zero, tmp704.v_one)) + ((clamp(tmp701, tmp704.v_zero, tmp704.v_one) * tmp700.v_c0_03) * (tmp704.v_one - clamp(tmp701, tmp704.v_zero, tmp704.v_one)))), clamp((c_stdconsts.v_dotfive - (tmp680 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp680 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp680 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp1407: f32 = (tmp1414.v_one - tmp1415);
	let tmp812: t_stdconsts = c_stdconsts;
	let tmp348: vec3<f32> = (tmp357 - tmp349);
	let tmp218: t_stdconsts = c_stdconsts;
	let tmp504: vec3<f32> = (((tmp534 * (tmp583.v_pos - tmp589)) - (vec3<f32>(tmp526.v_c0_2, tmp525.v_zero, tmp525.v_zero) * tmp521)) - tmp499);
	let tmp519: f32 = vmin3(tmp512);
	let tmp911: f32 = (tmp914.v_dotfive - tmp916);
	let tmp566: vec3<f32> = (tmp559 * clamp((dot(tmp558, tmp559) / tmp561), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp758: vec3<f32> = (tmp761 * tmp755);
	let tmp1119: f32 = (c_stdconsts.v_dotfive * tmp1116);
	let tmp951: vec3<f32> = (tmp950 * tmp966.v_c0_95);
	let tmp1151: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp280: f32 = (tmp281 / c_arlo_head_mouth_upper_consts.v_c0_03);
	let tmp681: f32 = (tmp680 / c_arlo_leg_consts2.v_c0_03);
	let tmp1185: f32 = (tmp1184 * tmp1186);
	let tmp710: f32 = (tmp704.v_one - clamp(tmp701, tmp704.v_zero, tmp704.v_one));
	let tmp572: vec3<f32> = (tmp583.v_pos - tmp584);
	let tmp527: vec3<f32> = vec3<f32>(tmp526.v_c0_2, tmp525.v_zero, tmp525.v_zero);
	let tmp784: f32 = ((vec2<f32>(length(tmp801), clamp(tmp796, c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length(tmp815), clamp((tmp808 / tmp809), tmp812.v_zero, tmp812.v_one)).x - c_arlo_leg_consts.v_c0_15));
	let tmp703: f32 = clamp(tmp701, tmp704.v_zero, tmp704.v_one);
	let tmp1032: f32 = clamp(tmp1031, tmp1033.v_zero, tmp1033.v_one);
	let tmp1183: f32 = mix(tmp1175, tmp1230, tmp1179);
	let tmp529: vec3<f32> = (tmp583.v_pos - tmp589);
	let tmp722: vec3<f32> = (tmp721 / (tmp715 * tmp731.v_c0_95));
	let tmp708: f32 = (tmp703 * tmp700.v_c0_03);
	let tmp560: f32 = dot(tmp558, tmp559);
	let tmp1208: vec3<f32> = (tmp1206 * tmp1207.v_c0_95);
	let tmp910: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp1152: f32 = (tmp1155.v_dotfive - tmp1157);
	let tmp739: vec3<f32> = (tmp738 / (tmp730 * tmp731.v_c0_95));
	let tmp1051: f32 = length(tmp1050);
	let tmp269: f32 = ((mix(((tmp297 - tmp295.v_one) * vmin3(vec3<f32>(tmp286.v_c0_8, tmp289.v_dotfive, tmp289.v_two))), (vec2<f32>(tmp323, tmp328).x - (c_arlo_head_mouth_upper_consts.v_c0_12 + tmp302)), clamp((c_stdconsts.v_dotfive - tmp280), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp280), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_head_mouth_upper_consts.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp280), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (vec2<f32>(length(tmp348), clamp(tmp353, c_stdconsts.v_zero, c_stdconsts.v_one)).x - (c_arlo_head_visage_consts.v_c0_22 - (c_arlo_head_visage_consts.v_c0_1 * smoothstep(c_arlo_head_visage_consts.v_c0_1, tmp343.v_one, vec2<f32>(length(tmp348), clamp(tmp353, c_stdconsts.v_zero, c_stdconsts.v_one)).y)))));
	let tmp1169: vec3<f32> = (tmp1168 / vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two));
	let tmp1278: f32 = length(tmp1277);
	let tmp287: vec3<f32> = vec3<f32>(tmp286.v_c0_8, tmp289.v_dotfive, tmp289.v_two);
	let tmp612: vec3<f32> = (tmp768 * tmp763);
	let tmp942: f32 = mix(tmp934, tmp989, tmp938);
	let tmp798: t_stdconsts = c_stdconsts;
	let tmp810: f32 = (tmp808 / tmp809);
	let tmp326: vec2<f32> = vec2<f32>(tmp323, tmp328);
	let tmp351: t_stdconsts = c_stdconsts;
	let tmp1273: f32 = clamp(tmp1272, tmp1274.v_zero, tmp1274.v_one);
	let tmp1287: f32 = clamp(tmp1286, tmp1288.v_zero, tmp1288.v_one);
	let tmp1408: f32 = (tmp1409 * tmp1407);
	let tmp1289: vec2<f32> = vec2<f32>(tmp1292, tmp1287);
	let tmp679: t_stdconsts = c_stdconsts;
	let tmp740: f32 = length(tmp739);
	let tmp1144: f32 = (tmp1143 / c_arlo_leg_consts2.v_c0_03);
	let tmp691: t_stdconsts = c_stdconsts;
	let tmp879: f32 = (tmp878 / c_arlo_leg_consts2.v_c0_03);
	let tmp783: f32 = (c_stdconsts.v_dotfive * tmp784);
	let tmp1073: t_stdconsts = c_stdconsts;
	let tmp562: f32 = (tmp560 / tmp561);
	let tmp762: vec3<f32> = (tmp612 - tmp758);
	let tmp282: t_stdconsts = c_stdconsts;
	let tmp742: t_stdconsts = c_stdconsts;
	let tmp304: t_arlo_head_mouth_upper_consts = c_arlo_head_mouth_upper_consts;
	let tmp1410: f32 = mix(tmp1298, tmp1417, tmp1415);
	let tmp497: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp676: f32 = (tmp679.v_dotfive - tmp681);
	let tmp853: f32 = ((mix(((length(((tmp997 - tmp895) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp928) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp926.v_two, tmp926.v_two, tmp926.v_two))), (tmp942 + tmp944), clamp(tmp911, tmp914.v_zero, tmp914.v_one)) + ((clamp(tmp911, tmp914.v_zero, tmp914.v_one) * tmp910.v_c0_03) * (tmp914.v_one - clamp(tmp911, tmp914.v_zero, tmp914.v_one)))), clamp((c_stdconsts.v_dotfive - tmp879), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp879), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp879), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(tmp1037, tmp1032).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(tmp1051, tmp1046).x - c_arlo_leg_consts.v_c0_15), clamp(((tmp1018 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp1018 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp1018 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp378: vec3<f32> = (tmp534 * tmp529);
	let tmp428: f32 = (tmp416 * tmp521);
	let tmp430: f32 = (((length((((tmp378 - (tmp527 * tmp521)) - tmp455) / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - min(((length((tmp504 / (vec3<f32>(tmp495.v_c0_1, tmp495.v_c0_2, tmp495.v_c0_15) * tmp497.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp495.v_c0_1, tmp495.v_c0_2, tmp495.v_c0_15) * tmp497.v_c0_95))), ((length((tmp487 / (vec3<f32>(tmp495.v_c0_1, tmp495.v_c0_2, tmp495.v_c0_15) * tmp497.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp495.v_c0_1, tmp495.v_c0_2, tmp495.v_c0_15) * tmp497.v_c0_95)))));
	let tmp716: vec3<f32> = (tmp715 * tmp731.v_c0_95);
	let tmp550: f32 = ((vec2<f32>(length((tmp558 - tmp566)), clamp(tmp562, c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15) - (vec2<f32>(length((tmp572 - tmp580)), clamp((tmp574 / tmp575), c_stdconsts.v_zero, c_stdconsts.v_one)).x - c_arlo_leg_consts.v_c0_15));
	let tmp667: f32 = (c_stdconsts.v_dotfive * tmp664);
	let tmp306: vec2<f32> = tmp326;
	let tmp1020: f32 = (tmp1018 / c_arlo_leg_consts.v_c0_1);
	let tmp961: f32 = vmin3(tmp951);
	let tmp1048: vec2<f32> = vec2<f32>(tmp1051, tmp1046);
	let tmp660: vec3<f32> = vec3<f32>(c_stdconsts.v_zero, tmp662, c_stdconsts.v_zero);
	let tmp505: vec3<f32> = (tmp504 / (vec3<f32>(tmp495.v_c0_1, tmp495.v_c0_2, tmp495.v_c0_15) * tmp497.v_c0_95));
	let tmp959: f32 = (tmp958 - tmp960.v_one);
	let tmp447: f32 = (tmp446 / c_arlo_leg_consts2.v_c0_03);
	let tmp465: f32 = opp(min(((length(tmp505) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp495.v_c0_1, tmp495.v_c0_2, tmp495.v_c0_15) * tmp497.v_c0_95))), ((length((tmp487 / (vec3<f32>(tmp495.v_c0_1, tmp495.v_c0_2, tmp495.v_c0_15) * tmp497.v_c0_95))) - c_stdconsts.v_one) * vmin3((vec3<f32>(tmp495.v_c0_1, tmp495.v_c0_2, tmp495.v_c0_15) * tmp497.v_c0_95)))));
	let tmp488: vec3<f32> = (tmp487 / (vec3<f32>(tmp495.v_c0_1, tmp495.v_c0_2, tmp495.v_c0_15) * tmp497.v_c0_95));
	let tmp886: vec3<f32> = (tmp997 - tmp895);
	let tmp903: f32 = (tmp902 / c_arlo_leg_consts2.v_c0_03);
	let tmp643: f32 = (c_stdconsts.v_dotfive * tmp640);
	let tmp458: vec3<f32> = ((tmp378 - (tmp527 * tmp521)) - tmp455);
	let tmp862: f32 = (((length((tmp886 / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(tmp928) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp926.v_two, tmp926.v_two, tmp926.v_two))), min(((tmp975 - tmp977.v_one) * vmin3(tmp967)), (tmp959 * tmp961)), clamp((c_stdconsts.v_dotfive - tmp903), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp903), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp903), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp567: vec3<f32> = (tmp558 - tmp566);
	let tmp564: t_stdconsts = c_stdconsts;
	let tmp946: f32 = (tmp942 + tmp944);
	let tmp339: f32 = smoothstep(c_arlo_head_visage_consts.v_c0_1, tmp343.v_one, vec2<f32>(length(tmp348), clamp(tmp353, tmp351.v_zero, tmp351.v_one)).y);
	let tmp347: f32 = length(tmp348);
	let tmp524: vec3<f32> = (tmp527 * tmp521);
	let tmp496: vec3<f32> = vec3<f32>(tmp495.v_c0_1, tmp495.v_c0_2, tmp495.v_c0_15);
	let tmp931: t_stdconsts = c_stdconsts;
	let tmp709: f32 = (tmp708 * tmp710);
	let tmp929: f32 = length(tmp928);
	let tmp578: t_stdconsts = c_stdconsts;
	let tmp1064: f32 = (tmp1070 + tmp1073.v_dotfive);
	let tmp925: vec3<f32> = vec3<f32>(tmp926.v_two, tmp926.v_two, tmp926.v_two);
	let tmp797: f32 = clamp(tmp796, tmp798.v_zero, tmp798.v_one);
	let tmp707: f32 = mix(tmp699, tmp754, tmp703);
	let tmp1159: f32 = (clamp(tmp1152, tmp1155.v_zero, tmp1155.v_one) * tmp1151.v_c0_03);
	let tmp162: f32 = dot(tmp163, tmp163);
	let tmp160: f32 = (tmp171.z * tmp171.z);
	let tmp091: vec2<f32> = mix(tmp030, tmp029, vec2<f32>(clamp(((tmp069 + tmp078) / (tmp085 + tmp051)), c_stdconsts.v_zero, c_stdconsts.v_one), clamp(((tmp069 + tmp078) / (tmp085 + tmp051)), c_stdconsts.v_zero, c_stdconsts.v_one)));
	let tmp089: vec2<f32> = mix(tmp031, tmp030, vec2<f32>(clamp(((tmp069 + tmp078) / (tmp085 + tmp051)), c_stdconsts.v_zero, c_stdconsts.v_one), clamp(((tmp069 + tmp078) / (tmp085 + tmp051)), c_stdconsts.v_zero, c_stdconsts.v_one)));
	let tmp469: f32 = clamp(tmp467, tmp470.v_zero, tmp470.v_one);
	let tmp086: f32 = (tmp085 + tmp051);
	let tmp303: f32 = (tmp304.v_c0_12 + tmp302);
	let tmp083: f32 = (tmp069 + tmp078);
	let tmp816: f32 = length(tmp815);
	let tmp978: f32 = vmin3(tmp967);
	let tmp476: f32 = (tmp470.v_one - tmp469);
	let tmp1261: f32 = (tmp1259 / c_arlo_leg_consts.v_c0_1);
	let tmp1202: f32 = vmin3(tmp1192);
	let tmp294: f32 = vmin3(tmp287);
	let tmp481: vec3<f32> = vec3<f32>(tmp495.v_c0_1, tmp495.v_c0_2, tmp495.v_c0_15);
	let tmp285: f32 = (tmp282.v_dotfive - tmp280);
	let tmp675: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp1200: f32 = (tmp1199 - tmp1201.v_one);
	let tmp520: f32 = (tmp517 * tmp519);
	let tmp406: f32 = (((length((((tmp378 - tmp524) - vec3<f32>(c_stdconsts.v_zero, tmp428, c_stdconsts.v_zero)) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length((tmp458 / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two))), (mix(tmp465, tmp520, tmp469) + ((tmp469 * tmp466.v_c0_03) * tmp476)), clamp((c_stdconsts.v_dotfive - tmp447), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp447), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp447), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp1219: f32 = vmin3(tmp1208);
	let tmp090: vec2<f32> = vec2<f32>(clamp((tmp083 / tmp086), c_stdconsts.v_zero, c_stdconsts.v_one), clamp((tmp083 / tmp086), c_stdconsts.v_zero, c_stdconsts.v_one));
	let tmp1062: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp913: f32 = clamp(tmp911, tmp914.v_zero, tmp914.v_one);
	let tmp1217: f32 = (tmp1216 - tmp1218.v_one);
	let tmp217: f32 = clamp(tmp222, tmp218.v_zero, tmp218.v_one);
	let tmp918: f32 = (tmp913 * tmp910.v_c0_03);
	let tmp976: f32 = (tmp975 - tmp977.v_one);
	let tmp920: f32 = (tmp914.v_one - tmp913);
	let tmp725: t_stdconsts = c_stdconsts;
	let tmp231: vec2<f32> = tmp230;
	let tmp1166: vec3<f32> = vec3<f32>(tmp1167.v_two, tmp1167.v_two, tmp1167.v_two);
	let tmp474: f32 = (tmp469 * tmp466.v_c0_03);
	let tmp1120: f32 = (tmp1119 / c_arlo_leg_consts2.v_c0_03);
	let tmp581: vec3<f32> = (tmp572 - tmp580);
	let tmp732: vec3<f32> = (tmp730 * tmp731.v_c0_95);
	let tmp1275: vec2<f32> = vec2<f32>(tmp1278, tmp1273);
	let tmp576: f32 = (tmp574 / tmp575);
	let tmp693: vec3<f32> = (tmp692 / vec3<f32>(tmp691.v_two, tmp691.v_two, tmp691.v_two));
	let tmp723: f32 = length(tmp722);
	let tmp1154: f32 = clamp(tmp1152, tmp1155.v_zero, tmp1155.v_one);
	let tmp1034: vec2<f32> = vec2<f32>(tmp1037, tmp1032);
	let tmp296: f32 = (tmp297 - tmp295.v_one);
	let tmp843: f32 = (c_stdconsts.v_dotfive * tmp842);
	let tmp270: f32 = (c_stdconsts.v_dotfive * tmp269);
	let tmp104: vec3<f32> = vec3<f32>(tmp103, tmp102, tmp101);
	let tmp1094: f32 = ((mix(((length(((tmp1238 - tmp1136) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp1169) - c_stdconsts.v_one) * vmin3(tmp1166)), (tmp1183 + tmp1185), tmp1154) + (tmp1159 * (tmp1155.v_one - tmp1154))), clamp((c_stdconsts.v_dotfive - tmp1120), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp1120), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp1120), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((tmp1275.x - c_arlo_leg_consts.v_c0_15), (tmp1289.x - c_arlo_leg_consts.v_c0_15), clamp((tmp1261 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((tmp1261 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((tmp1261 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp1172: t_stdconsts = c_stdconsts;
	let tmp1170: f32 = length(tmp1169);
	let tmp352: f32 = clamp(tmp353, tmp351.v_zero, tmp351.v_one);
	let tmp811: f32 = clamp(tmp810, tmp812.v_zero, tmp812.v_one);
	let tmp802: f32 = length(tmp801);
	let tmp1127: vec3<f32> = (tmp1238 - tmp1136);
	let tmp1103: f32 = (((length((tmp1127 / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((tmp1170 - tmp1172.v_one) * vmin3(tmp1166)), min((tmp1217 * tmp1219), (tmp1200 * tmp1202)), clamp((c_stdconsts.v_dotfive - tmp1144), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp1144), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp1144), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp1161: f32 = (tmp1155.v_one - tmp1154);
	let tmp1187: f32 = (tmp1183 + tmp1185);
	let tmp825: f32 = (vec2<f32>((mix((mix(((length(((tmp762 - tmp660) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp693) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp691.v_two, tmp691.v_two, tmp691.v_two))), (tmp707 + tmp709), clamp(tmp676, tmp679.v_zero, tmp679.v_one)) + ((clamp(tmp676, tmp679.v_zero, tmp679.v_one) * tmp675.v_c0_03) * (tmp679.v_one - clamp(tmp676, tmp679.v_zero, tmp679.v_one)))), clamp((c_stdconsts.v_dotfive - (tmp643 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp643 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp643 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix((vec2<f32>(tmp802, tmp797).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(tmp816, tmp811).x - c_arlo_leg_consts.v_c0_15), clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((((c_stdconsts.v_dotfive * ((mix(((length(((tmp762 - tmp660) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp693) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp691.v_two, tmp691.v_two, tmp691.v_two))), (tmp707 + tmp709), clamp(tmp676, tmp679.v_zero, tmp679.v_one)) + ((clamp(tmp676, tmp679.v_zero, tmp679.v_one) * tmp675.v_c0_03) * (tmp679.v_one - clamp(tmp676, tmp679.v_zero, tmp679.v_one)))), clamp((c_stdconsts.v_dotfive - (tmp643 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp643 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp643 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(tmp802, tmp797).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(tmp816, tmp811).x - c_arlo_leg_consts.v_c0_15), clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * ((mix(((length(((tmp762 - tmp660) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp693) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp691.v_two, tmp691.v_two, tmp691.v_two))), (tmp707 + tmp709), clamp(tmp676, tmp679.v_zero, tmp679.v_one)) + ((clamp(tmp676, tmp679.v_zero, tmp679.v_one) * tmp675.v_c0_03) * (tmp679.v_one - clamp(tmp676, tmp679.v_zero, tmp679.v_one)))), clamp((c_stdconsts.v_dotfive - (tmp643 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp643 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp643 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(tmp802, tmp797).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(tmp816, tmp811).x - c_arlo_leg_consts.v_c0_15), clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * ((mix(((length(((tmp762 - tmp660) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp693) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp691.v_two, tmp691.v_two, tmp691.v_two))), (tmp707 + tmp709), clamp(tmp676, tmp679.v_zero, tmp679.v_one)) + ((clamp(tmp676, tmp679.v_zero, tmp679.v_one) * tmp675.v_c0_03) * (tmp679.v_one - clamp(tmp676, tmp679.v_zero, tmp679.v_one)))), clamp((c_stdconsts.v_dotfive - (tmp643 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp643 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp643 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(tmp802, tmp797).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(tmp816, tmp811).x - c_arlo_leg_consts.v_c0_15), clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix(((length(((tmp762 - tmp660) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp693) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp691.v_two, tmp691.v_two, tmp691.v_two))), min(((tmp740 - tmp742.v_one) * vmin3(tmp732)), ((tmp723 - tmp725.v_one) * vmin3(tmp716))), clamp((c_stdconsts.v_dotfive - (tmp667 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp667 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp667 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((tmp762 - tmp660) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(tmp693) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp691.v_two, tmp691.v_two, tmp691.v_two))), min(((tmp740 - tmp742.v_one) * vmin3(tmp732)), ((tmp723 - tmp725.v_one) * vmin3(tmp716))), clamp((c_stdconsts.v_dotfive - (tmp667 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp667 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp667 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((tmp762 - tmp660) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(tmp693) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp691.v_two, tmp691.v_two, tmp691.v_two))), min(((tmp740 - tmp742.v_one) * vmin3(tmp732)), ((tmp723 - tmp725.v_one) * vmin3(tmp716))), clamp((c_stdconsts.v_dotfive - (tmp667 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp667 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp667 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * (((length(((tmp762 - tmp660) / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(tmp693) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp691.v_two, tmp691.v_two, tmp691.v_two))), min(((tmp740 - tmp742.v_one) * vmin3(tmp732)), ((tmp723 - tmp725.v_one) * vmin3(tmp716))), clamp((c_stdconsts.v_dotfive - (tmp667 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp667 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp667 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)))))) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one))))).x - (mix(vec2<f32>((mix((mix(((length((tmp886 / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((tmp929 - tmp931.v_one) * vmin3(tmp925)), tmp946, tmp913) + (tmp918 * tmp920)), clamp((c_stdconsts.v_dotfive - tmp879), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp879), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp879), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix((tmp1034.x - c_arlo_leg_consts.v_c0_15), (tmp1048.x - c_arlo_leg_consts.v_c0_15), clamp((tmp1020 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((tmp1020 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((tmp1020 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((((c_stdconsts.v_dotfive * tmp853) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * tmp853) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * tmp853) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix(((length((tmp886 / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((tmp929 - tmp931.v_one) * vmin3(tmp925)), min((tmp976 * tmp978), (tmp959 * tmp961)), clamp((c_stdconsts.v_dotfive - tmp903), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp903), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp903), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp862) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp862) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp862) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one))))).x, (mix(vec2<f32>((mix((mix(((length((tmp1127 / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((tmp1170 - tmp1172.v_one) * vmin3(tmp1166)), tmp1187, tmp1154) + (tmp1159 * tmp1161)), clamp((c_stdconsts.v_dotfive - tmp1120), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp1120), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp1120), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix((tmp1275.x - c_arlo_leg_consts.v_c0_15), (tmp1289.x - c_arlo_leg_consts.v_c0_15), clamp((tmp1261 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((tmp1261 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((tmp1261 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((((c_stdconsts.v_dotfive * tmp1094) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((((c_stdconsts.v_dotfive * tmp1094) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((((c_stdconsts.v_dotfive * tmp1094) / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix(((length((tmp1127 / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((tmp1170 - tmp1172.v_one) * vmin3(tmp1166)), min((tmp1217 * tmp1219), (tmp1200 * tmp1202)), clamp((c_stdconsts.v_dotfive - tmp1144), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp1144), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp1144), c_stdconsts.v_zero, c_stdconsts.v_one)))), clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1103) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1103) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - ((c_stdconsts.v_dotfive * tmp1103) / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one))))).x, (tmp1410 - tmp1408), clamp(tmp1064, tmp1073.v_zero, tmp1073.v_one)) - ((clamp(tmp1064, tmp1073.v_zero, tmp1073.v_one) * tmp1062.v_c0_2) * (tmp1073.v_one - clamp(tmp1064, tmp1073.v_zero, tmp1073.v_one)))), clamp(((tmp843 / c_arlo_leg_consts.v_c0_2) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp843 / c_arlo_leg_consts.v_c0_2) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_2) * (c_stdconsts.v_one - clamp(((tmp843 / c_arlo_leg_consts.v_c0_2) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp696: t_stdconsts = c_stdconsts;
	let tmp080: t_stdconsts = c_stdconsts;
	let tmp694: f32 = length(tmp693);
	let tmp841: f32 = (tmp843 / c_arlo_leg_consts.v_c0_2);
	let tmp685: f32 = (tmp679.v_one - clamp(tmp676, tmp679.v_zero, tmp679.v_one));
	let tmp683: f32 = (clamp(tmp676, tmp679.v_zero, tmp679.v_one) * tmp675.v_c0_03);
	let tmp852: f32 = (c_stdconsts.v_dotfive * tmp853);
	let tmp161: f32 = (tmp162 + tmp160);
	let tmp668: f32 = (tmp667 / c_arlo_leg_consts2.v_c0_03);
	let tmp651: vec3<f32> = (tmp762 - tmp660);
	let tmp644: f32 = (tmp643 / c_arlo_leg_consts2.v_c0_03);
	let tmp865: f32 = (c_stdconsts.v_dotfive * tmp862);
	let tmp489: f32 = length(tmp488);
	let tmp150: f32 = ((vec2<f32>(sqrt(tmp161), vec3<f32>(tmp231.x, tmp231.y, tmp217).z).x - (c_arlo_head_mouth_bottom_consts.v_c0_11 + (c_arlo_head_mouth_bottom_consts.v_c0_02 * vec2<f32>(sqrt(tmp161), vec3<f32>(tmp231.x, tmp231.y, tmp217).z).y))) - (mix((mix((tmp296 * tmp294), (tmp306.x - tmp303), clamp(tmp285, tmp282.v_zero, tmp282.v_one)) + ((clamp(tmp285, tmp282.v_zero, tmp282.v_one) * tmp304.v_c0_03) * (tmp282.v_one - clamp(tmp285, tmp282.v_zero, tmp282.v_one)))), (vec2<f32>(tmp347, tmp352).x - (c_arlo_head_visage_consts.v_c0_22 - (c_arlo_head_visage_consts.v_c0_1 * tmp339))), clamp(((tmp270 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp270 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp270 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp491: t_stdconsts = c_stdconsts;
	let tmp141: f32 = (vec2<f32>(sqrt(tmp161), vec3<f32>(tmp231.x, tmp231.y, tmp217).z).y * vec2<f32>(sqrt(tmp161), vec3<f32>(tmp231.x, tmp231.y, tmp217).z).y);
	let tmp139: t_stdconsts = c_stdconsts;
	let tmp627: f32 = (((length((tmp651 / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((tmp694 - tmp696.v_one) * vmin3(vec3<f32>(tmp691.v_two, tmp691.v_two, tmp691.v_two))), min(((tmp740 - tmp742.v_one) * vmin3(tmp732)), ((tmp723 - tmp725.v_one) * vmin3(tmp716))), clamp((c_stdconsts.v_dotfive - tmp668), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp668), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp668), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp618: f32 = ((mix(((length((tmp651 / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((tmp694 - tmp696.v_one) * vmin3(vec3<f32>(tmp691.v_two, tmp691.v_two, tmp691.v_two))), (tmp707 + tmp709), clamp(tmp676, tmp679.v_zero, tmp679.v_one)) + (tmp683 * tmp685)), clamp((c_stdconsts.v_dotfive - tmp644), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp644), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp644), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((vec2<f32>(tmp802, tmp797).x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(tmp816, tmp811).x - c_arlo_leg_consts.v_c0_15), clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp783 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp1160: f32 = (tmp1159 * tmp1161);
	let tmp1220: f32 = (tmp1217 * tmp1219);
	let tmp874: f32 = (c_stdconsts.v_dotfive - tmp879);
	let tmp799: vec2<f32> = vec2<f32>(tmp802, tmp797);
	let tmp887: vec3<f32> = (tmp886 / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one));
	let tmp582: f32 = length(tmp581);
	let tmp898: f32 = (c_stdconsts.v_dotfive - tmp903);
	let tmp568: f32 = length(tmp567);
	let tmp506: f32 = length(tmp505);
	let tmp549: f32 = (c_stdconsts.v_dotfive * tmp550);
	let tmp917: f32 = mix(((tmp929 - tmp931.v_one) * vmin3(tmp925)), tmp946, tmp913);
	let tmp919: f32 = (tmp918 * tmp920);
	let tmp930: f32 = (tmp929 - tmp931.v_one);
	let tmp932: f32 = vmin3(tmp925);
	let tmp459: vec3<f32> = (tmp458 / vec3<f32>(c_stdconsts.v_two, c_stdconsts.v_two, c_stdconsts.v_two));
	let tmp442: f32 = (c_stdconsts.v_dotfive - tmp447);
	let tmp962: f32 = (tmp959 * tmp961);
	let tmp433: f32 = (c_stdconsts.v_dotfive * tmp430);
	let tmp426: vec3<f32> = vec3<f32>(c_stdconsts.v_zero, tmp428, c_stdconsts.v_zero);
	let tmp409: f32 = (c_stdconsts.v_dotfive * tmp406);
	let tmp979: f32 = (tmp976 * tmp978);
	let tmp1015: vec2<f32> = tmp1034;
	let tmp1026: f32 = (tmp1020 + c_stdconsts.v_dotfive);
	let tmp350: vec2<f32> = vec2<f32>(tmp347, tmp352);
	let tmp1040: vec2<f32> = tmp1048;
	let tmp785: f32 = (tmp783 / c_arlo_leg_consts.v_c0_1);
	let tmp092: vec2<f32> = mix(tmp089, tmp091, tmp090);
	let tmp338: f32 = (c_arlo_head_visage_consts.v_c0_1 * tmp339);
	let tmp1066: f32 = (tmp1073.v_one - clamp(tmp1064, tmp1073.v_zero, tmp1073.v_one));
	let tmp1068: f32 = (clamp(tmp1064, tmp1073.v_zero, tmp1073.v_one) * tmp1062.v_c0_2);
	let tmp1093: f32 = (c_stdconsts.v_dotfive * tmp1094);
	let tmp1106: f32 = (c_stdconsts.v_dotfive * tmp1103);
	let tmp084: f32 = (tmp083 / tmp086);
	let tmp813: vec2<f32> = vec2<f32>(tmp816, tmp811);
	let tmp1115: f32 = (c_stdconsts.v_dotfive - tmp1120);
	let tmp278: f32 = (clamp(tmp285, tmp282.v_zero, tmp282.v_one) * tmp304.v_c0_03);
	let tmp276: f32 = (tmp282.v_one - clamp(tmp285, tmp282.v_zero, tmp282.v_one));
	let tmp268: f32 = (tmp270 / c_arlo_leg_consts.v_c0_1);
	let tmp1203: f32 = (tmp1200 * tmp1202);
	let tmp1128: vec3<f32> = (tmp1127 / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one));
	let tmp743: f32 = vmin3(tmp732);
	let tmp741: f32 = (tmp740 - tmp742.v_one);
	let tmp1139: f32 = (c_stdconsts.v_dotfive - tmp1144);
	let tmp226: vec3<f32> = vec3<f32>(tmp231.x, tmp231.y, tmp217);
	let tmp358: t_arlo_head_visage_consts = c_arlo_head_visage_consts;
	let tmp1134: t_stdconsts = c_stdconsts;
	let tmp1258: t_stdconsts = c_stdconsts;
	let tmp901: t_stdconsts = c_stdconsts;
	let tmp877: t_stdconsts = c_stdconsts;
	let tmp1281: vec2<f32> = tmp1289;
	let tmp1118: t_stdconsts = c_stdconsts;
	let tmp445: t_stdconsts = c_stdconsts;
	let tmp457: t_stdconsts = c_stdconsts;
	let tmp528: vec3<f32> = (tmp378 - tmp524);
	let tmp726: f32 = vmin3(tmp716);
	let tmp893: t_stdconsts = c_stdconsts;
	let tmp1142: t_stdconsts = c_stdconsts;
	let tmp1017: t_stdconsts = c_stdconsts;
	let tmp1038: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp1279: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp1158: f32 = mix(((tmp1170 - tmp1172.v_one) * vmin3(tmp1166)), tmp1187, tmp1154);
	let tmp033: vec3<f32> = tmp104;
	let tmp678: f32 = clamp(tmp676, tmp679.v_zero, tmp679.v_one);
	let tmp473: f32 = mix(tmp465, tmp520, tmp469);
	let tmp283: f32 = clamp(tmp285, tmp282.v_zero, tmp282.v_one);
	let tmp1074: f32 = clamp(tmp1064, tmp1073.v_zero, tmp1073.v_one);
	let tmp724: f32 = (tmp723 - tmp725.v_one);
	let tmp475: f32 = (tmp474 * tmp476);
	let tmp1114: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp873: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp1267: f32 = (tmp1261 + tmp1258.v_dotfive);
	let tmp025: vec2<f32> = vec2<f32>(vec3<f32>(tmp092.x, tmp092.y, clamp(tmp084, tmp080.v_zero, tmp080.v_one)).x, vec3<f32>(tmp092.x, tmp092.y, clamp(tmp084, tmp080.v_zero, tmp080.v_one)).y);
	let tmp909: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp577: f32 = clamp(tmp576, tmp578.v_zero, tmp578.v_one);
	let tmp563: f32 = clamp(tmp562, tmp564.v_zero, tmp564.v_one);
	let tmp711: f32 = (tmp707 + tmp709);
	let tmp1173: f32 = vmin3(tmp1166);
	let tmp498: vec3<f32> = (tmp496 * tmp497.v_c0_95);
	let tmp1171: f32 = (tmp1170 - tmp1172.v_one);
	let tmp1150: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp482: vec3<f32> = (tmp481 * tmp497.v_c0_95);
	let tmp1406: f32 = (tmp1410 - tmp1408);
	let tmp690: vec3<f32> = vec3<f32>(tmp691.v_two, tmp691.v_two, tmp691.v_two);
	let tmp441: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp508: t_stdconsts = c_stdconsts;
	let tmp1256: vec2<f32> = tmp1275;
	let tmp305: f32 = (tmp306.x - tmp303);
	let tmp293: f32 = (tmp296 * tmp294);
	let tmp617: f32 = (c_stdconsts.v_dotfive * tmp618);
	let tmp1067: f32 = (tmp1068 * tmp1066);
	let tmp883: f32 = (tmp877.v_one - clamp(tmp874, tmp877.v_zero, tmp877.v_one));
	let tmp1265: f32 = (tmp1258.v_one - clamp(tmp1267, tmp1258.v_zero, tmp1258.v_one));
	let tmp876: f32 = clamp(tmp874, tmp877.v_zero, tmp877.v_one);
	let tmp1280: f32 = (tmp1281.x - tmp1279.v_c0_15);
	let tmp1263: f32 = (clamp(tmp1267, tmp1258.v_zero, tmp1258.v_one) * tmp1279.v_c0_1);
	let tmp1257: f32 = clamp(tmp1267, tmp1258.v_zero, tmp1258.v_one);
	let tmp1069: f32 = mix(vec2<f32>((mix((mix(((length(tmp1128) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp1134.v_one, tmp1134.v_one, tmp1134.v_one))), (tmp1158 + tmp1160), clamp(tmp1115, tmp1118.v_zero, tmp1118.v_one)) + ((clamp(tmp1115, tmp1118.v_zero, tmp1118.v_one) * tmp1114.v_c0_03) * (tmp1118.v_one - clamp(tmp1115, tmp1118.v_zero, tmp1118.v_one)))), (mix((tmp1256.x - tmp1279.v_c0_15), tmp1280, tmp1257) - (tmp1263 * tmp1265)), clamp(((tmp1093 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp1093 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp1093 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix(((length(tmp1128) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp1134.v_one, tmp1134.v_one, tmp1134.v_one))), (mix((tmp1171 * tmp1173), min(tmp1220, tmp1203), clamp(tmp1139, tmp1142.v_zero, tmp1142.v_one)) + ((clamp(tmp1139, tmp1142.v_zero, tmp1142.v_one) * tmp1150.v_c0_03) * (tmp1142.v_one - clamp(tmp1139, tmp1142.v_zero, tmp1142.v_one)))), clamp((c_stdconsts.v_dotfive - (tmp1106 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp1106 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp1106 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one))))).x, tmp1406, tmp1074);
	let tmp1016: f32 = clamp(tmp1026, tmp1017.v_zero, tmp1017.v_one);
	let tmp663: f32 = (c_stdconsts.v_dotfive - tmp668);
	let tmp1141: f32 = clamp(tmp1139, tmp1142.v_zero, tmp1142.v_one);
	let tmp279: f32 = mix(tmp293, tmp305, tmp283);
	let tmp805: vec2<f32> = tmp813;
	let tmp277: f32 = (tmp278 * tmp276);
	let tmp905: f32 = (clamp(tmp898, tmp901.v_zero, tmp901.v_one) * tmp909.v_c0_03);
	let tmp744: f32 = (tmp741 * tmp743);
	let tmp900: f32 = clamp(tmp898, tmp901.v_zero, tmp901.v_one);
	let tmp1095: f32 = (tmp1093 / c_arlo_leg_consts.v_c0_1);
	let tmp1122: f32 = (clamp(tmp1115, tmp1118.v_zero, tmp1118.v_one) * tmp1114.v_c0_03);
	let tmp434: f32 = (tmp433 / c_arlo_leg_consts2.v_c0_03);
	let tmp963: f32 = min(tmp979, tmp962);
	let tmp1117: f32 = clamp(tmp1115, tmp1118.v_zero, tmp1118.v_one);
	let tmp854: f32 = (tmp852 / c_arlo_leg_consts.v_c0_1);
	let tmp881: f32 = (tmp876 * tmp873.v_c0_03);
	let tmp1107: f32 = (tmp1106 / c_arlo_leg_consts2.v_c0_03);
	let tmp1204: f32 = min(tmp1220, tmp1203);
	let tmp024: f32 = dot(tmp025, tmp025);
	let tmp1124: f32 = (tmp1118.v_one - tmp1117);
	let tmp262: f32 = (tmp268 + c_stdconsts.v_dotfive);
	let tmp022: f32 = (tmp033.z * tmp033.z);
	let tmp933: f32 = (tmp930 * tmp932);
	let tmp565: vec2<f32> = vec2<f32>(tmp568, tmp563);
	let tmp1129: f32 = length(tmp1128);
	let tmp093: vec2<f32> = tmp092;
	let tmp907: f32 = (tmp901.v_one - tmp900);
	let tmp682: f32 = mix(((tmp694 - tmp696.v_one) * vmin3(tmp690)), tmp711, tmp678);
	let tmp1131: t_stdconsts = c_stdconsts;
	let tmp684: f32 = (tmp683 * tmp685);
	let tmp1174: f32 = (tmp1171 * tmp1173);
	let tmp166: f32 = sqrt(tmp161);
	let tmp803: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp079: f32 = clamp(tmp084, tmp080.v_zero, tmp080.v_one);
	let tmp1135: vec3<f32> = vec3<f32>(tmp1134.v_one, tmp1134.v_one, tmp1134.v_one);
	let tmp164: vec3<f32> = tmp226;
	let tmp492: f32 = vmin3(tmp482);
	let tmp444: f32 = clamp(tmp442, tmp445.v_zero, tmp445.v_one);
	let tmp274: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp782: t_stdconsts = c_stdconsts;
	let tmp271: t_stdconsts = c_stdconsts;
	let tmp417: vec3<f32> = (tmp528 - tmp426);
	let tmp695: f32 = (tmp694 - tmp696.v_one);
	let tmp697: f32 = vmin3(tmp690);
	let tmp151: f32 = (c_stdconsts.v_dotfive * tmp150);
	let tmp642: t_stdconsts = c_stdconsts;
	let tmp410: f32 = (tmp409 / c_arlo_leg_consts2.v_c0_03);
	let tmp1146: f32 = (tmp1141 * tmp1150.v_c0_03);
	let tmp140: f32 = (tmp139.v_one - tmp141);
	let tmp835: f32 = (tmp841 + c_stdconsts.v_dotfive);
	let tmp826: f32 = (c_stdconsts.v_dotfive * tmp825);
	let tmp844: t_stdconsts = c_stdconsts;
	let tmp791: f32 = (tmp785 + tmp782.v_dotfive);
	let tmp393: f32 = (((length((tmp417 / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - (mix(((length(tmp459) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp457.v_two, tmp457.v_two, tmp457.v_two))), min(((tmp506 - tmp508.v_one) * vmin3(tmp498)), ((tmp489 - tmp491.v_one) * tmp492)), clamp((c_stdconsts.v_dotfive - tmp434), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp434), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp434), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp384: f32 = ((mix(((length((tmp417 / vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(c_stdconsts.v_one, c_stdconsts.v_one, c_stdconsts.v_one))), (mix(((length(tmp459) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp457.v_two, tmp457.v_two, tmp457.v_two))), (tmp473 + tmp475), tmp444) + ((tmp444 * tmp441.v_c0_03) * (tmp445.v_one - tmp444))), clamp((c_stdconsts.v_dotfive - tmp410), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp410), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp410), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix((tmp565.x - c_arlo_leg_consts.v_c0_15), (vec2<f32>(tmp582, tmp577).x - c_arlo_leg_consts.v_c0_15), clamp(((tmp549 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp549 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp549 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp890: t_stdconsts = c_stdconsts;
	let tmp1148: f32 = (tmp1142.v_one - tmp1141);
	let tmp1039: f32 = (tmp1040.x - tmp1038.v_c0_15);
	let tmp658: t_stdconsts = c_stdconsts;
	let tmp666: t_stdconsts = c_stdconsts;
	let tmp1022: f32 = (tmp1016 * tmp1038.v_c0_1);
	let tmp1024: f32 = (tmp1017.v_one - tmp1016);
	let tmp341: vec2<f32> = tmp350;
	let tmp866: f32 = (tmp865 / c_arlo_leg_consts2.v_c0_03);
	let tmp630: f32 = (c_stdconsts.v_dotfive * tmp627);
	let tmp507: f32 = (tmp506 - tmp508.v_one);
	let tmp490: f32 = (tmp489 - tmp491.v_one);
	let tmp639: f32 = (tmp642.v_dotfive - tmp644);
	let tmp1162: f32 = (tmp1158 + tmp1160);
	let tmp462: t_stdconsts = c_stdconsts;
	let tmp674: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp460: f32 = length(tmp459);
	let tmp551: f32 = (tmp549 / c_arlo_leg_consts.v_c0_1);
	let tmp509: f32 = vmin3(tmp498);
	let tmp727: f32 = (tmp724 * tmp726);
	let tmp579: vec2<f32> = vec2<f32>(tmp582, tmp577);
	let tmp456: vec3<f32> = vec3<f32>(tmp457.v_two, tmp457.v_two, tmp457.v_two);
	let tmp1014: f32 = (tmp1015.x - tmp1038.v_c0_15);
	let tmp477: f32 = (tmp473 + tmp475);
	let tmp888: f32 = length(tmp887);
	let tmp652: vec3<f32> = (tmp651 / vec3<f32>(tmp658.v_one, tmp658.v_one, tmp658.v_one));
	let tmp451: f32 = (tmp445.v_one - tmp444);
	let tmp894: vec3<f32> = vec3<f32>(tmp893.v_one, tmp893.v_one, tmp893.v_one);
	let tmp449: f32 = (tmp444 * tmp441.v_c0_03);
	let tmp337: f32 = (tmp358.v_c0_22 - tmp338);
	let tmp921: f32 = (tmp917 + tmp919);
	let tmp846: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp780: vec2<f32> = tmp799;
	let tmp1255: f32 = (tmp1256.x - tmp1279.v_c0_15);
	let tmp638: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp880: f32 = mix(((tmp888 - tmp890.v_one) * vmin3(tmp894)), tmp921, tmp876);
	let tmp779: f32 = (tmp780.x - tmp803.v_c0_15);
	let tmp396: f32 = (c_stdconsts.v_dotfive * tmp393);
	let tmp904: f32 = mix(tmp933, tmp963, tmp900);
	let tmp845: f32 = clamp(tmp835, tmp844.v_zero, tmp844.v_one);
	let tmp872: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp1090: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp149: f32 = (tmp151 / (c_arlo_head_mouth_bottom_consts.v_c0_001 + (tmp140 * c_arlo_head_mouth_bottom_consts.v_c0_06)));
	let tmp641: f32 = clamp(tmp639, tmp642.v_zero, tmp642.v_one);
	let tmp789: f32 = (tmp782.v_one - clamp(tmp791, tmp782.v_zero, tmp782.v_one));
	let tmp665: f32 = clamp(tmp663, tmp666.v_zero, tmp666.v_one);
	let tmp1121: f32 = mix(((tmp1129 - tmp1131.v_one) * vmin3(tmp1135)), tmp1162, tmp1117);
	let tmp1123: f32 = (tmp1122 * tmp1124);
	let tmp728: f32 = min(tmp744, tmp727);
	let tmp849: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp156: f32 = (c_arlo_head_mouth_bottom_consts.v_c0_02 * vec2<f32>(tmp166, tmp164.z).y);
	let tmp266: f32 = (clamp(tmp262, tmp271.v_zero, tmp271.v_one) * tmp274.v_c0_1);
	let tmp383: f32 = (c_stdconsts.v_dotfive * tmp384);
	let tmp264: f32 = (tmp271.v_one - clamp(tmp262, tmp271.v_zero, tmp271.v_one));
	let tmp1105: t_stdconsts = c_stdconsts;
	let tmp569: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp1130: f32 = (tmp1129 - tmp1131.v_one);
	let tmp698: f32 = (tmp695 * tmp697);
	let tmp619: f32 = (tmp617 / c_arlo_leg_consts.v_c0_1);
	let tmp1102: f32 = (tmp1105.v_dotfive - tmp1107);
	let tmp1113: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp824: f32 = (tmp826 / c_arlo_leg_consts.v_c0_2);
	let tmp493: f32 = (tmp490 * tmp492);
	let tmp851: t_stdconsts = c_stdconsts;
	let tmp546: vec2<f32> = tmp565;
	let tmp548: t_stdconsts = c_stdconsts;
	let tmp864: t_stdconsts = c_stdconsts;
	let tmp432: t_stdconsts = c_stdconsts;
	let tmp424: t_stdconsts = c_stdconsts;
	let tmp1145: f32 = mix(tmp1174, tmp1204, tmp1141);
	let tmp1147: f32 = (tmp1146 * tmp1148);
	let tmp408: t_stdconsts = c_stdconsts;
	let tmp659: vec3<f32> = vec3<f32>(tmp658.v_one, tmp658.v_one, tmp658.v_one);
	let tmp557: f32 = (tmp551 + tmp548.v_dotfive);
	let tmp1092: t_stdconsts = c_stdconsts;
	let tmp781: f32 = clamp(tmp791, tmp782.v_zero, tmp782.v_one);
	let tmp1021: f32 = mix(tmp1014, tmp1039, tmp1016);
	let tmp882: f32 = (tmp881 * tmp883);
	let tmp159: t_arlo_head_mouth_bottom_consts = c_arlo_head_mouth_bottom_consts;
	let tmp275: f32 = (tmp279 + tmp277);
	let tmp1101: f32 = (tmp1095 + tmp1092.v_dotfive);
	let tmp631: f32 = (tmp630 / c_arlo_leg_consts2.v_c0_03);
	let tmp463: f32 = vmin3(tmp456);
	let tmp461: f32 = (tmp460 - tmp462.v_one);
	let tmp787: f32 = (tmp781 * tmp803.v_c0_1);
	let tmp861: f32 = (tmp864.v_dotfive - tmp866);
	let tmp860: f32 = (tmp854 + tmp851.v_dotfive);
	let tmp373: f32 = (vec2<f32>((mix((mix(((length((tmp417 / vec3<f32>(tmp424.v_one, tmp424.v_one, tmp424.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp424.v_one, tmp424.v_one, tmp424.v_one))), (mix((tmp461 * tmp463), tmp477, tmp444) + (tmp449 * tmp451)), clamp((tmp408.v_dotfive - tmp410), tmp408.v_zero, tmp408.v_one)) + ((clamp((tmp408.v_dotfive - tmp410), tmp408.v_zero, tmp408.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp408.v_one - clamp((tmp408.v_dotfive - tmp410), tmp408.v_zero, tmp408.v_one)))), (mix((tmp546.x - tmp569.v_c0_15), (tmp579.x - tmp569.v_c0_15), clamp(tmp557, tmp548.v_zero, tmp548.v_one)) - ((clamp(tmp557, tmp548.v_zero, tmp548.v_one) * tmp569.v_c0_1) * (tmp548.v_one - clamp(tmp557, tmp548.v_zero, tmp548.v_one)))), clamp(((tmp383 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp(((tmp383 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp(((tmp383 / c_arlo_leg_consts.v_c0_1) + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix(((length((tmp417 / vec3<f32>(tmp424.v_one, tmp424.v_one, tmp424.v_one))) - c_stdconsts.v_one) * vmin3(vec3<f32>(tmp424.v_one, tmp424.v_one, tmp424.v_one))), (mix((tmp461 * tmp463), min((tmp507 * tmp509), tmp493), clamp((tmp432.v_dotfive - tmp434), tmp432.v_zero, tmp432.v_one)) + ((clamp((tmp432.v_dotfive - tmp434), tmp432.v_zero, tmp432.v_one) * c_arlo_leg_consts2.v_c0_03) * (tmp432.v_one - clamp((tmp432.v_dotfive - tmp434), tmp432.v_zero, tmp432.v_one)))), clamp((c_stdconsts.v_dotfive - (tmp396 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - (tmp396 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - (tmp396 / c_arlo_leg_consts2.v_c0_03)), c_stdconsts.v_zero, c_stdconsts.v_one))))).x - (mix(vec2<f32>((mix((mix(((length(tmp652) - c_stdconsts.v_one) * vmin3(tmp659)), (tmp682 + tmp684), tmp641) + ((tmp641 * tmp638.v_c0_03) * (tmp642.v_one - tmp641))), (mix(tmp779, (tmp805.x - tmp803.v_c0_15), tmp781) - (tmp787 * tmp789)), clamp((tmp619 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((tmp619 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_1) * (c_stdconsts.v_one - clamp((tmp619 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))), (mix(((length(tmp652) - c_stdconsts.v_one) * vmin3(tmp659)), (mix(tmp698, tmp728, tmp665) + ((tmp665 * tmp674.v_c0_03) * (tmp666.v_one - tmp665))), clamp((c_stdconsts.v_dotfive - tmp631), c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp((c_stdconsts.v_dotfive - tmp631), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts2.v_c0_03) * (c_stdconsts.v_one - clamp((c_stdconsts.v_dotfive - tmp631), c_stdconsts.v_zero, c_stdconsts.v_one))))).x, (mix(vec2<f32>((mix((tmp880 + tmp882), (tmp1021 - (tmp1022 * tmp1024)), clamp(tmp860, tmp851.v_zero, tmp851.v_one)) - ((clamp(tmp860, tmp851.v_zero, tmp851.v_one) * tmp849.v_c0_1) * (tmp851.v_one - clamp(tmp860, tmp851.v_zero, tmp851.v_one)))), (mix(((tmp888 - tmp890.v_one) * vmin3(tmp894)), (tmp904 + (tmp905 * tmp907)), clamp(tmp861, tmp864.v_zero, tmp864.v_one)) + ((clamp(tmp861, tmp864.v_zero, tmp864.v_one) * tmp872.v_c0_03) * (tmp864.v_one - clamp(tmp861, tmp864.v_zero, tmp864.v_one))))).x, (tmp1069 - tmp1067), tmp845) - ((tmp845 * tmp846.v_c0_2) * (tmp844.v_one - tmp845))), clamp((tmp824 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((tmp824 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_2) * (c_stdconsts.v_one - clamp((tmp824 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp646: f32 = (tmp641 * tmp638.v_c0_03);
	let tmp1023: f32 = (tmp1022 * tmp1024);
	let tmp648: f32 = (tmp642.v_one - tmp641);
	let tmp450: f32 = (tmp449 * tmp451);
	let tmp1065: f32 = (tmp1069 - tmp1067);
	let tmp448: f32 = mix((tmp461 * tmp463), tmp477, tmp444);
	let tmp653: f32 = length(tmp652);
	let tmp418: vec3<f32> = (tmp417 / vec3<f32>(tmp424.v_one, tmp424.v_one, tmp424.v_one));
	let tmp655: t_stdconsts = c_stdconsts;
	let tmp340: f32 = (tmp341.x - tmp337);
	let tmp891: f32 = vmin3(tmp894);
	let tmp023: f32 = (tmp024 + tmp022);
	let tmp1264: f32 = (tmp1263 * tmp1265);
	let tmp571: vec2<f32> = tmp579;
	let tmp804: f32 = (tmp805.x - tmp803.v_c0_15);
	let tmp1262: f32 = mix(tmp1255, tmp1280, tmp1257);
	let tmp138: f32 = (tmp140 * c_arlo_head_mouth_bottom_consts.v_c0_06);
	let tmp889: f32 = (tmp888 - tmp890.v_one);
	let tmp906: f32 = (tmp905 * tmp907);
	let tmp272: f32 = clamp(tmp262, tmp271.v_zero, tmp271.v_one);
	let tmp670: f32 = (tmp665 * tmp674.v_c0_03);
	let tmp429: f32 = (tmp432.v_dotfive - tmp434);
	let tmp839: f32 = (tmp845 * tmp846.v_c0_2);
	let tmp672: f32 = (tmp666.v_one - tmp665);
	let tmp165: vec2<f32> = vec2<f32>(tmp166, tmp164.z);
	let tmp1132: f32 = vmin3(tmp1135);
	let tmp405: f32 = (tmp408.v_dotfive - tmp410);
	let tmp088: vec3<f32> = vec3<f32>(tmp093.x, tmp093.y, tmp079);
	let tmp510: f32 = (tmp507 * tmp509);
	let tmp404: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp686: f32 = (tmp682 + tmp684);
	let tmp440: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp133: f32 = ((vec2<f32>(sqrt(tmp023), tmp088.z).x - (c_arlo_head_brows_consts.v_c0_035 - (c_arlo_head_brows_consts.v_c0_025 * vec2<f32>(sqrt(tmp023), tmp088.z).y))) - (mix((tmp165.x - (tmp159.v_c0_11 + tmp156)), (mix(tmp275, tmp340, tmp272) - (tmp266 * tmp264)), clamp((tmp149 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((tmp149 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * (c_arlo_head_mouth_bottom_consts.v_c0_001 + tmp138)) * (c_stdconsts.v_one - clamp((tmp149 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp142: t_arlo_head_mouth_bottom_consts = c_arlo_head_mouth_bottom_consts;
	let tmp837: f32 = (tmp844.v_one - tmp845);
	let tmp1111: f32 = (tmp1105.v_one - clamp(tmp1102, tmp1105.v_zero, tmp1105.v_one));
	let tmp870: f32 = (tmp864.v_one - clamp(tmp861, tmp864.v_zero, tmp864.v_one));
	let tmp494: f32 = min(tmp510, tmp493);
	let tmp547: f32 = clamp(tmp557, tmp548.v_zero, tmp548.v_one);
	let tmp1104: f32 = clamp(tmp1102, tmp1105.v_zero, tmp1105.v_one);
	let tmp850: f32 = clamp(tmp860, tmp851.v_zero, tmp851.v_one);
	let tmp868: f32 = (clamp(tmp861, tmp864.v_zero, tmp864.v_one) * tmp872.v_c0_03);
	let tmp553: f32 = (tmp547 * tmp569.v_c0_1);
	let tmp267: f32 = mix(tmp275, tmp340, tmp272);
	let tmp265: f32 = (tmp266 * tmp264);
	let tmp464: f32 = (tmp461 * tmp463);
	let tmp157: vec2<f32> = tmp165;
	let tmp1133: f32 = (tmp1130 * tmp1132);
	let tmp616: t_stdconsts = c_stdconsts;
	let tmp629: t_stdconsts = c_stdconsts;
	let tmp892: f32 = (tmp889 * tmp891);
	let tmp152: t_stdconsts = c_stdconsts;
	let tmp1109: f32 = (tmp1104 * tmp1113.v_c0_03);
	let tmp827: t_stdconsts = c_stdconsts;
	let tmp625: f32 = (tmp619 + tmp616.v_dotfive);
	let tmp626: f32 = (tmp629.v_dotfive - tmp631);
	let tmp645: f32 = mix(((tmp653 - tmp655.v_one) * vmin3(tmp659)), tmp686, tmp641);
	let tmp647: f32 = (tmp646 * tmp648);
	let tmp656: f32 = vmin3(tmp659);
	let tmp858: f32 = (tmp851.v_one - tmp850);
	let tmp908: f32 = (tmp904 + tmp906);
	let tmp856: f32 = (tmp850 * tmp849.v_c0_1);
	let tmp438: f32 = (tmp432.v_one - clamp(tmp429, tmp432.v_zero, tmp432.v_one));
	let tmp436: f32 = (clamp(tmp429, tmp432.v_zero, tmp432.v_one) * tmp440.v_c0_03);
	let tmp669: f32 = mix(tmp698, tmp728, tmp665);
	let tmp671: f32 = (tmp670 * tmp672);
	let tmp143: f32 = (tmp149 + tmp152.v_dotfive);
	let tmp884: f32 = (tmp880 + tmp882);
	let tmp786: f32 = mix(tmp779, tmp804, tmp781);
	let tmp397: f32 = (tmp396 / c_arlo_leg_consts2.v_c0_03);
	let tmp1025: f32 = (tmp1021 - tmp1023);
	let tmp654: f32 = (tmp653 - tmp655.v_one);
	let tmp545: f32 = (tmp546.x - tmp569.v_c0_15);
	let tmp425: vec3<f32> = vec3<f32>(tmp424.v_one, tmp424.v_one, tmp424.v_one);
	let tmp421: t_stdconsts = c_stdconsts;
	let tmp570: f32 = (tmp571.x - tmp569.v_c0_15);
	let tmp419: f32 = length(tmp418);
	let tmp155: f32 = (tmp159.v_c0_11 + tmp156);
	let tmp863: f32 = clamp(tmp861, tmp864.v_zero, tmp864.v_one);
	let tmp414: f32 = (tmp408.v_one - clamp(tmp405, tmp408.v_zero, tmp408.v_one));
	let tmp1097: f32 = (clamp(tmp1101, tmp1092.v_zero, tmp1092.v_one) * tmp1090.v_c0_1);
	let tmp452: f32 = (tmp448 + tmp450);
	let tmp1099: f32 = (tmp1092.v_one - clamp(tmp1101, tmp1092.v_zero, tmp1092.v_one));
	let tmp134: f32 = (c_stdconsts.v_dotfive * tmp133);
	let tmp840: f32 = mix(vec2<f32>((mix(tmp884, tmp1025, tmp850) - (tmp856 * tmp858)), (mix(tmp892, tmp908, tmp863) + (tmp868 * tmp870))).x, tmp1065, tmp845);
	let tmp374: f32 = (c_stdconsts.v_dotfive * tmp373);
	let tmp412: f32 = (clamp(tmp405, tmp408.v_zero, tmp408.v_one) * tmp404.v_c0_03);
	let tmp137: f32 = (tmp142.v_c0_001 + tmp138);
	let tmp028: f32 = sqrt(tmp023);
	let tmp838: f32 = (tmp839 * tmp837);
	let tmp026: vec3<f32> = tmp088;
	let tmp385: f32 = (tmp383 / c_arlo_leg_consts.v_c0_1);
	let tmp637: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp1266: f32 = (tmp1262 - tmp1264);
	let tmp817: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp614: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp818: f32 = (tmp824 + tmp827.v_dotfive);
	let tmp555: f32 = (tmp548.v_one - tmp547);
	let tmp407: f32 = clamp(tmp405, tmp408.v_zero, tmp408.v_one);
	let tmp788: f32 = (tmp787 * tmp789);
	let tmp431: f32 = clamp(tmp429, tmp432.v_zero, tmp432.v_one);
	let tmp1149: f32 = (tmp1145 + tmp1147);
	let tmp1091: f32 = clamp(tmp1101, tmp1092.v_zero, tmp1092.v_one);
	let tmp1125: f32 = (tmp1121 + tmp1123);
	let tmp657: f32 = (tmp654 * tmp656);
	let tmp628: f32 = clamp(tmp626, tmp629.v_zero, tmp629.v_one);
	let tmp147: f32 = (clamp(tmp143, tmp152.v_zero, tmp152.v_one) * tmp137);
	let tmp154: f32 = (tmp157.x - tmp155);
	let tmp145: f32 = (tmp152.v_one - clamp(tmp143, tmp152.v_zero, tmp152.v_one));
	let tmp263: f32 = (tmp267 - tmp265);
	let tmp437: f32 = (tmp436 * tmp438);
	let tmp615: f32 = clamp(tmp625, tmp616.v_zero, tmp616.v_one);
	let tmp649: f32 = (tmp645 + tmp647);
	let tmp820: f32 = (tmp827.v_one - clamp(tmp818, tmp827.v_zero, tmp827.v_one));
	let tmp1110: f32 = (tmp1109 * tmp1111);
	let tmp435: f32 = mix(tmp464, tmp494, tmp431);
	let tmp021: t_arlo_head_brows_consts = c_arlo_head_brows_consts;
	let tmp153: f32 = clamp(tmp143, tmp152.v_zero, tmp152.v_one);
	let tmp828: f32 = clamp(tmp818, tmp827.v_zero, tmp827.v_one);
	let tmp403: t_arlo_leg_consts2 = c_arlo_leg_consts2;
	let tmp380: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp673: f32 = (tmp669 + tmp671);
	let tmp790: f32 = (tmp786 - tmp788);
	let tmp132: f32 = (tmp134 / c_arlo_head_brows_consts.v_c0_025);
	let tmp855: f32 = mix(tmp884, tmp1025, tmp850);
	let tmp392: f32 = (c_stdconsts.v_dotfive - tmp397);
	let tmp124: f32 = (tmp021.v_c0_025 * vec2<f32>(tmp028, tmp026.z).y);
	let tmp391: f32 = (tmp385 + c_stdconsts.v_dotfive);
	let tmp857: f32 = (tmp856 * tmp858);
	let tmp635: f32 = (tmp629.v_one - tmp628);
	let tmp822: f32 = (tmp828 * tmp817.v_c0_2);
	let tmp1096: f32 = mix(tmp1125, tmp1266, tmp1091);
	let tmp633: f32 = (tmp628 * tmp637.v_c0_03);
	let tmp1098: f32 = (tmp1097 * tmp1099);
	let tmp027: vec2<f32> = vec2<f32>(tmp028, tmp026.z);
	let tmp867: f32 = mix(tmp892, tmp908, tmp863);
	let tmp422: f32 = vmin3(tmp425);
	let tmp623: f32 = (tmp616.v_one - tmp615);
	let tmp420: f32 = (tmp419 - tmp421.v_one);
	let tmp621: f32 = (tmp615 * tmp614.v_c0_1);
	let tmp869: f32 = (tmp868 * tmp870);
	let tmp554: f32 = (tmp553 * tmp555);
	let tmp552: f32 = mix(tmp545, tmp570, tmp547);
	let tmp372: f32 = (tmp374 / c_arlo_leg_consts.v_c0_2);
	let tmp836: f32 = (tmp840 - tmp838);
	let tmp1108: f32 = mix(tmp1133, tmp1149, tmp1104);
	let tmp382: t_stdconsts = c_stdconsts;
	let tmp011: f32 = ((mix((tmp027.x - (tmp021.v_c0_035 - tmp124)), (mix(tmp154, tmp263, tmp153) - (tmp147 * tmp145)), clamp((tmp132 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((tmp132 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_head_brows_consts.v_c0_025) * (c_stdconsts.v_one - clamp((tmp132 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))) - (mix(vec2<f32>((mix((mix((tmp420 * tmp422), tmp452, tmp407) + (tmp412 * tmp414)), (tmp552 - tmp554), clamp(tmp391, tmp382.v_zero, tmp382.v_one)) - ((clamp(tmp391, tmp382.v_zero, tmp382.v_one) * tmp380.v_c0_1) * (tmp382.v_one - clamp(tmp391, tmp382.v_zero, tmp382.v_one)))), (mix((tmp420 * tmp422), (tmp435 + tmp437), clamp(tmp392, c_stdconsts.v_zero, c_stdconsts.v_one)) + ((clamp(tmp392, c_stdconsts.v_zero, c_stdconsts.v_one) * tmp403.v_c0_03) * (c_stdconsts.v_one - clamp(tmp392, c_stdconsts.v_zero, c_stdconsts.v_one))))).x, (mix(vec2<f32>((mix(tmp649, tmp790, tmp615) - (tmp621 * tmp623)), (mix(tmp657, tmp673, tmp628) + (tmp633 * tmp635))).x, tmp836, tmp828) - (tmp822 * tmp820)), clamp((tmp372 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)) - ((clamp((tmp372 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one) * c_arlo_leg_consts.v_c0_2) * (c_stdconsts.v_one - clamp((tmp372 + c_stdconsts.v_dotfive), c_stdconsts.v_zero, c_stdconsts.v_one)))));
	let tmp413: f32 = (tmp412 * tmp414);
	let tmp395: t_stdconsts = c_stdconsts;
	let tmp411: f32 = mix((tmp420 * tmp422), tmp452, tmp407);
	let tmp871: f32 = (tmp867 + tmp869);
	let tmp401: f32 = (tmp395.v_one - clamp(tmp392, tmp395.v_zero, tmp395.v_one));
	let tmp622: f32 = (tmp621 * tmp623);
	let tmp823: f32 = mix(vec2<f32>((mix(tmp649, tmp790, tmp615) - tmp622), (mix(tmp657, tmp673, tmp628) + (tmp633 * tmp635))).x, tmp836, tmp828);
	let tmp632: f32 = mix(tmp657, tmp673, tmp628);
	let tmp634: f32 = (tmp633 * tmp635);
	let tmp423: f32 = (tmp420 * tmp422);
	let tmp012: f32 = (c_stdconsts.v_dotfive * tmp011);
	let tmp1100: f32 = (tmp1096 - tmp1098);
	let tmp821: f32 = (tmp822 * tmp820);
	let tmp620: f32 = mix(tmp649, tmp790, tmp615);
	let tmp859: f32 = (tmp855 - tmp857);
	let tmp126: f32 = (tmp132 + c_stdconsts.v_dotfive);
	let tmp389: f32 = (tmp382.v_one - clamp(tmp391, tmp382.v_zero, tmp382.v_one));
	let tmp394: f32 = clamp(tmp392, tmp395.v_zero, tmp395.v_one);
	let tmp1112: f32 = (tmp1108 + tmp1110);
	let tmp387: f32 = (clamp(tmp391, tmp382.v_zero, tmp382.v_one) * tmp380.v_c0_1);
	let tmp123: vec2<f32> = tmp027;
	let tmp135: t_stdconsts = c_stdconsts;
	let tmp366: f32 = (tmp372 + c_stdconsts.v_dotfive);
	let tmp375: t_stdconsts = c_stdconsts;
	let tmp016: f32 = (tmp021.v_c0_035 - tmp124);
	let tmp146: f32 = (tmp147 * tmp145);
	let tmp377: t_arlo_leg_consts = c_arlo_leg_consts;
	let tmp415: f32 = (tmp411 + tmp413);
	let tmp148: f32 = mix(tmp154, tmp263, tmp153);
	let tmp439: f32 = (tmp435 + tmp437);
	let tmp556: f32 = (tmp552 - tmp554);
	let tmp381: f32 = clamp(tmp391, tmp382.v_zero, tmp382.v_one);
	let tmp399: f32 = (tmp394 * tmp403.v_c0_03);
	let tmp636: f32 = (tmp632 + tmp634);
	let tmp130: f32 = (clamp(tmp126, tmp135.v_zero, tmp135.v_one) * c_arlo_head_brows_consts.v_c0_025);
	let tmp128: f32 = (tmp135.v_one - clamp(tmp126, tmp135.v_zero, tmp135.v_one));
	let tmp388: f32 = (tmp387 * tmp389);
	let tmp386: f32 = mix(tmp415, tmp556, tmp381);
	let tmp848: vec2<f32> = vec2<f32>(tmp859, tmp871);
	let tmp370: f32 = (clamp(tmp366, tmp375.v_zero, tmp375.v_one) * tmp377.v_c0_2);
	let tmp819: f32 = (tmp823 - tmp821);
	let tmp144: f32 = (tmp148 - tmp146);
	let tmp368: f32 = (tmp375.v_one - clamp(tmp366, tmp375.v_zero, tmp375.v_one));
	let tmp136: f32 = clamp(tmp126, tmp135.v_zero, tmp135.v_one);
	let tmp1089: vec2<f32> = vec2<f32>(tmp1100, tmp1112);
	let tmp376: f32 = clamp(tmp366, tmp375.v_zero, tmp375.v_one);
	let tmp125: f32 = (tmp123.x - tmp016);
	let tmp010: f32 = (tmp012 / c_arlo_head_brows_consts.v_c0_01);
	let tmp400: f32 = (tmp399 * tmp401);
	let tmp624: f32 = (tmp620 - tmp622);
	let tmp398: f32 = mix(tmp423, tmp439, tmp394);
	let tmp015: t_arlo_head_brows_consts = c_arlo_head_brows_consts;
	let tmp1063: vec2<f32> = tmp1089;
	let tmp1061: vec2<f32> = tmp848;
	let tmp013: t_stdconsts = c_stdconsts;
	let tmp129: f32 = (tmp130 * tmp128);
	let tmp402: f32 = (tmp398 + tmp400);
	let tmp131: f32 = mix(tmp125, tmp144, tmp136);
	let tmp613: vec2<f32> = vec2<f32>(tmp624, tmp636);
	let tmp390: f32 = (tmp386 - tmp388);
	let tmp004: f32 = (tmp010 + tmp013.v_dotfive);
	let tmp369: f32 = (tmp370 * tmp368);
	let tmp371: f32 = mix(vec2<f32>(tmp390, tmp402).x, tmp819, tmp376);
	let tmp602: vec2<f32> = tmp613;
	let tmp014: f32 = clamp(tmp004, tmp013.v_zero, tmp013.v_one);
	let tmp379: vec2<f32> = vec2<f32>(tmp390, tmp402);
	let tmp367: f32 = (tmp371 - tmp369);
	let tmp834: f32 = min(tmp1063.y, tmp1061.y);
	let tmp127: f32 = (tmp131 - tmp129);
	let tmp008: f32 = (tmp014 * tmp015.v_c0_01);
	let tmp006: f32 = (tmp013.v_one - tmp014);
	let tmp592: vec2<f32> = tmp379;
	let tmp829: f32 = min(tmp834, tmp602.y);
	let tmp007: f32 = (tmp008 * tmp006);
	let tmp009: f32 = mix(tmp127, tmp367, tmp014);
	let tmp005: f32 = (tmp009 - tmp007);
	let tmp365: f32 = min(tmp829, tmp592.y);
	let tmp261: f32 = min(tmp005, tmp365);
	return t_outlet(tmp261);
}

